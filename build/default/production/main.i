# 1 "main.asm"
# 1 "<built-in>" 1
# 1 "main.asm" 2
;File: newAsm.asm
;Description: Read the temperature off a DS18B20 sensor
;Author: Haoling Zhou
;Created on November 20, 2024, 3:34 PM

; CONFIG
    CONFIG FOSC = HS ; Oscillator Selection bits (HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1/CLKIN)
    CONFIG WDTE = OFF ; Watchdog Timer Enable bit (WDT disabled)
    CONFIG PWRTE = OFF ; Power-up Timer Enable bit (PWRT disabled)
    CONFIG MCLRE = OFF ; RA5/MCLR/VPP Pin Function Select bit (RA5/MCLR/VPP pin function is digital input, MCLR internally tied to VDD)
    CONFIG BOREN = OFF ; Brown-out Detect Enable bit (BOD disabled)
    CONFIG LVP = OFF ; Low-Voltage Programming Enable bit (RB4/PGM pin has digital I/O function, HV on MCLR must be used for programming)
    CONFIG CPD = OFF ; Data EE Memory Code Protection bit (Data memory code protection off)
    CONFIG CP = OFF ; Flash Program Memory Code Protection bit (Code protection off)


# 1 "/opt/microchip/xc8/v2.50/pic/include/xc.inc" 1 3






# 1 "/opt/microchip/mplabx/v6.20/packs/Microchip/PIC16Fxxx_DFP/1.6.156/xc8/pic/include/pic.inc" 1 3



# 1 "/opt/microchip/mplabx/v6.20/packs/Microchip/PIC16Fxxx_DFP/1.6.156/xc8/pic/include/pic_as_chip_select.inc" 1 3
# 163 "/opt/microchip/mplabx/v6.20/packs/Microchip/PIC16Fxxx_DFP/1.6.156/xc8/pic/include/pic_as_chip_select.inc" 3
# 1 "/opt/microchip/mplabx/v6.20/packs/Microchip/PIC16Fxxx_DFP/1.6.156/xc8/pic/include/proc/pic16f628a.inc" 1 3
# 47 "/opt/microchip/mplabx/v6.20/packs/Microchip/PIC16Fxxx_DFP/1.6.156/xc8/pic/include/proc/pic16f628a.inc" 3
INDF equ 0000h



TMR0 equ 0001h



PCL equ 0002h



STATUS equ 0003h

STATUS_C_POSN equ 0000h
STATUS_C_POSITION equ 0000h
STATUS_C_SIZE equ 0001h
STATUS_C_LENGTH equ 0001h
STATUS_C_MASK equ 0001h
STATUS_DC_POSN equ 0001h
STATUS_DC_POSITION equ 0001h
STATUS_DC_SIZE equ 0001h
STATUS_DC_LENGTH equ 0001h
STATUS_DC_MASK equ 0002h
STATUS_Z_POSN equ 0002h
STATUS_Z_POSITION equ 0002h
STATUS_Z_SIZE equ 0001h
STATUS_Z_LENGTH equ 0001h
STATUS_Z_MASK equ 0004h
STATUS_nPD_POSN equ 0003h
STATUS_nPD_POSITION equ 0003h
STATUS_nPD_SIZE equ 0001h
STATUS_nPD_LENGTH equ 0001h
STATUS_nPD_MASK equ 0008h
STATUS_nTO_POSN equ 0004h
STATUS_nTO_POSITION equ 0004h
STATUS_nTO_SIZE equ 0001h
STATUS_nTO_LENGTH equ 0001h
STATUS_nTO_MASK equ 0010h
STATUS_RP_POSN equ 0005h
STATUS_RP_POSITION equ 0005h
STATUS_RP_SIZE equ 0002h
STATUS_RP_LENGTH equ 0002h
STATUS_RP_MASK equ 0060h
STATUS_IRP_POSN equ 0007h
STATUS_IRP_POSITION equ 0007h
STATUS_IRP_SIZE equ 0001h
STATUS_IRP_LENGTH equ 0001h
STATUS_IRP_MASK equ 0080h
STATUS_RP0_POSN equ 0005h
STATUS_RP0_POSITION equ 0005h
STATUS_RP0_SIZE equ 0001h
STATUS_RP0_LENGTH equ 0001h
STATUS_RP0_MASK equ 0020h
STATUS_RP1_POSN equ 0006h
STATUS_RP1_POSITION equ 0006h
STATUS_RP1_SIZE equ 0001h
STATUS_RP1_LENGTH equ 0001h
STATUS_RP1_MASK equ 0040h
STATUS_CARRY_POSN equ 0000h
STATUS_CARRY_POSITION equ 0000h
STATUS_CARRY_SIZE equ 0001h
STATUS_CARRY_LENGTH equ 0001h
STATUS_CARRY_MASK equ 0001h
STATUS_ZERO_POSN equ 0002h
STATUS_ZERO_POSITION equ 0002h
STATUS_ZERO_SIZE equ 0001h
STATUS_ZERO_LENGTH equ 0001h
STATUS_ZERO_MASK equ 0004h



FSR equ 0004h



PORTA equ 0005h

PORTA_RA0_POSN equ 0000h
PORTA_RA0_POSITION equ 0000h
PORTA_RA0_SIZE equ 0001h
PORTA_RA0_LENGTH equ 0001h
PORTA_RA0_MASK equ 0001h
PORTA_RA1_POSN equ 0001h
PORTA_RA1_POSITION equ 0001h
PORTA_RA1_SIZE equ 0001h
PORTA_RA1_LENGTH equ 0001h
PORTA_RA1_MASK equ 0002h
PORTA_RA2_POSN equ 0002h
PORTA_RA2_POSITION equ 0002h
PORTA_RA2_SIZE equ 0001h
PORTA_RA2_LENGTH equ 0001h
PORTA_RA2_MASK equ 0004h
PORTA_RA3_POSN equ 0003h
PORTA_RA3_POSITION equ 0003h
PORTA_RA3_SIZE equ 0001h
PORTA_RA3_LENGTH equ 0001h
PORTA_RA3_MASK equ 0008h
PORTA_RA4_POSN equ 0004h
PORTA_RA4_POSITION equ 0004h
PORTA_RA4_SIZE equ 0001h
PORTA_RA4_LENGTH equ 0001h
PORTA_RA4_MASK equ 0010h
PORTA_RA5_POSN equ 0005h
PORTA_RA5_POSITION equ 0005h
PORTA_RA5_SIZE equ 0001h
PORTA_RA5_LENGTH equ 0001h
PORTA_RA5_MASK equ 0020h
PORTA_RA6_POSN equ 0006h
PORTA_RA6_POSITION equ 0006h
PORTA_RA6_SIZE equ 0001h
PORTA_RA6_LENGTH equ 0001h
PORTA_RA6_MASK equ 0040h
PORTA_RA7_POSN equ 0007h
PORTA_RA7_POSITION equ 0007h
PORTA_RA7_SIZE equ 0001h
PORTA_RA7_LENGTH equ 0001h
PORTA_RA7_MASK equ 0080h



PORTB equ 0006h

PORTB_RB0_POSN equ 0000h
PORTB_RB0_POSITION equ 0000h
PORTB_RB0_SIZE equ 0001h
PORTB_RB0_LENGTH equ 0001h
PORTB_RB0_MASK equ 0001h
PORTB_RB1_POSN equ 0001h
PORTB_RB1_POSITION equ 0001h
PORTB_RB1_SIZE equ 0001h
PORTB_RB1_LENGTH equ 0001h
PORTB_RB1_MASK equ 0002h
PORTB_RB2_POSN equ 0002h
PORTB_RB2_POSITION equ 0002h
PORTB_RB2_SIZE equ 0001h
PORTB_RB2_LENGTH equ 0001h
PORTB_RB2_MASK equ 0004h
PORTB_RB3_POSN equ 0003h
PORTB_RB3_POSITION equ 0003h
PORTB_RB3_SIZE equ 0001h
PORTB_RB3_LENGTH equ 0001h
PORTB_RB3_MASK equ 0008h
PORTB_RB4_POSN equ 0004h
PORTB_RB4_POSITION equ 0004h
PORTB_RB4_SIZE equ 0001h
PORTB_RB4_LENGTH equ 0001h
PORTB_RB4_MASK equ 0010h
PORTB_RB5_POSN equ 0005h
PORTB_RB5_POSITION equ 0005h
PORTB_RB5_SIZE equ 0001h
PORTB_RB5_LENGTH equ 0001h
PORTB_RB5_MASK equ 0020h
PORTB_RB6_POSN equ 0006h
PORTB_RB6_POSITION equ 0006h
PORTB_RB6_SIZE equ 0001h
PORTB_RB6_LENGTH equ 0001h
PORTB_RB6_MASK equ 0040h
PORTB_RB7_POSN equ 0007h
PORTB_RB7_POSITION equ 0007h
PORTB_RB7_SIZE equ 0001h
PORTB_RB7_LENGTH equ 0001h
PORTB_RB7_MASK equ 0080h



PCLATH equ 000Ah

PCLATH_PCLATH_POSN equ 0000h
PCLATH_PCLATH_POSITION equ 0000h
PCLATH_PCLATH_SIZE equ 0005h
PCLATH_PCLATH_LENGTH equ 0005h
PCLATH_PCLATH_MASK equ 001Fh



INTCON equ 000Bh

INTCON_RBIF_POSN equ 0000h
INTCON_RBIF_POSITION equ 0000h
INTCON_RBIF_SIZE equ 0001h
INTCON_RBIF_LENGTH equ 0001h
INTCON_RBIF_MASK equ 0001h
INTCON_INTF_POSN equ 0001h
INTCON_INTF_POSITION equ 0001h
INTCON_INTF_SIZE equ 0001h
INTCON_INTF_LENGTH equ 0001h
INTCON_INTF_MASK equ 0002h
INTCON_T0IF_POSN equ 0002h
INTCON_T0IF_POSITION equ 0002h
INTCON_T0IF_SIZE equ 0001h
INTCON_T0IF_LENGTH equ 0001h
INTCON_T0IF_MASK equ 0004h
INTCON_RBIE_POSN equ 0003h
INTCON_RBIE_POSITION equ 0003h
INTCON_RBIE_SIZE equ 0001h
INTCON_RBIE_LENGTH equ 0001h
INTCON_RBIE_MASK equ 0008h
INTCON_INTE_POSN equ 0004h
INTCON_INTE_POSITION equ 0004h
INTCON_INTE_SIZE equ 0001h
INTCON_INTE_LENGTH equ 0001h
INTCON_INTE_MASK equ 0010h
INTCON_T0IE_POSN equ 0005h
INTCON_T0IE_POSITION equ 0005h
INTCON_T0IE_SIZE equ 0001h
INTCON_T0IE_LENGTH equ 0001h
INTCON_T0IE_MASK equ 0020h
INTCON_PEIE_POSN equ 0006h
INTCON_PEIE_POSITION equ 0006h
INTCON_PEIE_SIZE equ 0001h
INTCON_PEIE_LENGTH equ 0001h
INTCON_PEIE_MASK equ 0040h
INTCON_GIE_POSN equ 0007h
INTCON_GIE_POSITION equ 0007h
INTCON_GIE_SIZE equ 0001h
INTCON_GIE_LENGTH equ 0001h
INTCON_GIE_MASK equ 0080h
INTCON_TMR0IF_POSN equ 0002h
INTCON_TMR0IF_POSITION equ 0002h
INTCON_TMR0IF_SIZE equ 0001h
INTCON_TMR0IF_LENGTH equ 0001h
INTCON_TMR0IF_MASK equ 0004h
INTCON_TMR0IE_POSN equ 0005h
INTCON_TMR0IE_POSITION equ 0005h
INTCON_TMR0IE_SIZE equ 0001h
INTCON_TMR0IE_LENGTH equ 0001h
INTCON_TMR0IE_MASK equ 0020h



PIR1 equ 000Ch

PIR1_TMR1IF_POSN equ 0000h
PIR1_TMR1IF_POSITION equ 0000h
PIR1_TMR1IF_SIZE equ 0001h
PIR1_TMR1IF_LENGTH equ 0001h
PIR1_TMR1IF_MASK equ 0001h
PIR1_TMR2IF_POSN equ 0001h
PIR1_TMR2IF_POSITION equ 0001h
PIR1_TMR2IF_SIZE equ 0001h
PIR1_TMR2IF_LENGTH equ 0001h
PIR1_TMR2IF_MASK equ 0002h
PIR1_CCP1IF_POSN equ 0002h
PIR1_CCP1IF_POSITION equ 0002h
PIR1_CCP1IF_SIZE equ 0001h
PIR1_CCP1IF_LENGTH equ 0001h
PIR1_CCP1IF_MASK equ 0004h
PIR1_TXIF_POSN equ 0004h
PIR1_TXIF_POSITION equ 0004h
PIR1_TXIF_SIZE equ 0001h
PIR1_TXIF_LENGTH equ 0001h
PIR1_TXIF_MASK equ 0010h
PIR1_RCIF_POSN equ 0005h
PIR1_RCIF_POSITION equ 0005h
PIR1_RCIF_SIZE equ 0001h
PIR1_RCIF_LENGTH equ 0001h
PIR1_RCIF_MASK equ 0020h
PIR1_CMIF_POSN equ 0006h
PIR1_CMIF_POSITION equ 0006h
PIR1_CMIF_SIZE equ 0001h
PIR1_CMIF_LENGTH equ 0001h
PIR1_CMIF_MASK equ 0040h
PIR1_EEIF_POSN equ 0007h
PIR1_EEIF_POSITION equ 0007h
PIR1_EEIF_SIZE equ 0001h
PIR1_EEIF_LENGTH equ 0001h
PIR1_EEIF_MASK equ 0080h



TMR1L equ 000Eh



TMR1H equ 000Fh



T1CON equ 0010h

T1CON_TMR1ON_POSN equ 0000h
T1CON_TMR1ON_POSITION equ 0000h
T1CON_TMR1ON_SIZE equ 0001h
T1CON_TMR1ON_LENGTH equ 0001h
T1CON_TMR1ON_MASK equ 0001h
T1CON_TMR1CS_POSN equ 0001h
T1CON_TMR1CS_POSITION equ 0001h
T1CON_TMR1CS_SIZE equ 0001h
T1CON_TMR1CS_LENGTH equ 0001h
T1CON_TMR1CS_MASK equ 0002h
T1CON_nT1SYNC_POSN equ 0002h
T1CON_nT1SYNC_POSITION equ 0002h
T1CON_nT1SYNC_SIZE equ 0001h
T1CON_nT1SYNC_LENGTH equ 0001h
T1CON_nT1SYNC_MASK equ 0004h
T1CON_T1OSCEN_POSN equ 0003h
T1CON_T1OSCEN_POSITION equ 0003h
T1CON_T1OSCEN_SIZE equ 0001h
T1CON_T1OSCEN_LENGTH equ 0001h
T1CON_T1OSCEN_MASK equ 0008h
T1CON_T1CKPS_POSN equ 0004h
T1CON_T1CKPS_POSITION equ 0004h
T1CON_T1CKPS_SIZE equ 0002h
T1CON_T1CKPS_LENGTH equ 0002h
T1CON_T1CKPS_MASK equ 0030h
T1CON_T1CKPS0_POSN equ 0004h
T1CON_T1CKPS0_POSITION equ 0004h
T1CON_T1CKPS0_SIZE equ 0001h
T1CON_T1CKPS0_LENGTH equ 0001h
T1CON_T1CKPS0_MASK equ 0010h
T1CON_T1CKPS1_POSN equ 0005h
T1CON_T1CKPS1_POSITION equ 0005h
T1CON_T1CKPS1_SIZE equ 0001h
T1CON_T1CKPS1_LENGTH equ 0001h
T1CON_T1CKPS1_MASK equ 0020h



TMR2 equ 0011h



T2CON equ 0012h

T2CON_T2CKPS_POSN equ 0000h
T2CON_T2CKPS_POSITION equ 0000h
T2CON_T2CKPS_SIZE equ 0002h
T2CON_T2CKPS_LENGTH equ 0002h
T2CON_T2CKPS_MASK equ 0003h
T2CON_TMR2ON_POSN equ 0002h
T2CON_TMR2ON_POSITION equ 0002h
T2CON_TMR2ON_SIZE equ 0001h
T2CON_TMR2ON_LENGTH equ 0001h
T2CON_TMR2ON_MASK equ 0004h
T2CON_TOUTPS_POSN equ 0003h
T2CON_TOUTPS_POSITION equ 0003h
T2CON_TOUTPS_SIZE equ 0004h
T2CON_TOUTPS_LENGTH equ 0004h
T2CON_TOUTPS_MASK equ 0078h
T2CON_T2CKPS0_POSN equ 0000h
T2CON_T2CKPS0_POSITION equ 0000h
T2CON_T2CKPS0_SIZE equ 0001h
T2CON_T2CKPS0_LENGTH equ 0001h
T2CON_T2CKPS0_MASK equ 0001h
T2CON_T2CKPS1_POSN equ 0001h
T2CON_T2CKPS1_POSITION equ 0001h
T2CON_T2CKPS1_SIZE equ 0001h
T2CON_T2CKPS1_LENGTH equ 0001h
T2CON_T2CKPS1_MASK equ 0002h
T2CON_TOUTPS0_POSN equ 0003h
T2CON_TOUTPS0_POSITION equ 0003h
T2CON_TOUTPS0_SIZE equ 0001h
T2CON_TOUTPS0_LENGTH equ 0001h
T2CON_TOUTPS0_MASK equ 0008h
T2CON_TOUTPS1_POSN equ 0004h
T2CON_TOUTPS1_POSITION equ 0004h
T2CON_TOUTPS1_SIZE equ 0001h
T2CON_TOUTPS1_LENGTH equ 0001h
T2CON_TOUTPS1_MASK equ 0010h
T2CON_TOUTPS2_POSN equ 0005h
T2CON_TOUTPS2_POSITION equ 0005h
T2CON_TOUTPS2_SIZE equ 0001h
T2CON_TOUTPS2_LENGTH equ 0001h
T2CON_TOUTPS2_MASK equ 0020h
T2CON_TOUTPS3_POSN equ 0006h
T2CON_TOUTPS3_POSITION equ 0006h
T2CON_TOUTPS3_SIZE equ 0001h
T2CON_TOUTPS3_LENGTH equ 0001h
T2CON_TOUTPS3_MASK equ 0040h



CCPR1L equ 0015h



CCPR1H equ 0016h



CCP1CON equ 0017h

CCP1CON_CCP1M_POSN equ 0000h
CCP1CON_CCP1M_POSITION equ 0000h
CCP1CON_CCP1M_SIZE equ 0004h
CCP1CON_CCP1M_LENGTH equ 0004h
CCP1CON_CCP1M_MASK equ 000Fh
CCP1CON_CCP1Y_POSN equ 0004h
CCP1CON_CCP1Y_POSITION equ 0004h
CCP1CON_CCP1Y_SIZE equ 0001h
CCP1CON_CCP1Y_LENGTH equ 0001h
CCP1CON_CCP1Y_MASK equ 0010h
CCP1CON_CCP1X_POSN equ 0005h
CCP1CON_CCP1X_POSITION equ 0005h
CCP1CON_CCP1X_SIZE equ 0001h
CCP1CON_CCP1X_LENGTH equ 0001h
CCP1CON_CCP1X_MASK equ 0020h
CCP1CON_CCP1M0_POSN equ 0000h
CCP1CON_CCP1M0_POSITION equ 0000h
CCP1CON_CCP1M0_SIZE equ 0001h
CCP1CON_CCP1M0_LENGTH equ 0001h
CCP1CON_CCP1M0_MASK equ 0001h
CCP1CON_CCP1M1_POSN equ 0001h
CCP1CON_CCP1M1_POSITION equ 0001h
CCP1CON_CCP1M1_SIZE equ 0001h
CCP1CON_CCP1M1_LENGTH equ 0001h
CCP1CON_CCP1M1_MASK equ 0002h
CCP1CON_CCP1M2_POSN equ 0002h
CCP1CON_CCP1M2_POSITION equ 0002h
CCP1CON_CCP1M2_SIZE equ 0001h
CCP1CON_CCP1M2_LENGTH equ 0001h
CCP1CON_CCP1M2_MASK equ 0004h
CCP1CON_CCP1M3_POSN equ 0003h
CCP1CON_CCP1M3_POSITION equ 0003h
CCP1CON_CCP1M3_SIZE equ 0001h
CCP1CON_CCP1M3_LENGTH equ 0001h
CCP1CON_CCP1M3_MASK equ 0008h



RCSTA equ 0018h

RCSTA_RX9D_POSN equ 0000h
RCSTA_RX9D_POSITION equ 0000h
RCSTA_RX9D_SIZE equ 0001h
RCSTA_RX9D_LENGTH equ 0001h
RCSTA_RX9D_MASK equ 0001h
RCSTA_OERR_POSN equ 0001h
RCSTA_OERR_POSITION equ 0001h
RCSTA_OERR_SIZE equ 0001h
RCSTA_OERR_LENGTH equ 0001h
RCSTA_OERR_MASK equ 0002h
RCSTA_FERR_POSN equ 0002h
RCSTA_FERR_POSITION equ 0002h
RCSTA_FERR_SIZE equ 0001h
RCSTA_FERR_LENGTH equ 0001h
RCSTA_FERR_MASK equ 0004h
RCSTA_ADEN_POSN equ 0003h
RCSTA_ADEN_POSITION equ 0003h
RCSTA_ADEN_SIZE equ 0001h
RCSTA_ADEN_LENGTH equ 0001h
RCSTA_ADEN_MASK equ 0008h
RCSTA_CREN_POSN equ 0004h
RCSTA_CREN_POSITION equ 0004h
RCSTA_CREN_SIZE equ 0001h
RCSTA_CREN_LENGTH equ 0001h
RCSTA_CREN_MASK equ 0010h
RCSTA_SREN_POSN equ 0005h
RCSTA_SREN_POSITION equ 0005h
RCSTA_SREN_SIZE equ 0001h
RCSTA_SREN_LENGTH equ 0001h
RCSTA_SREN_MASK equ 0020h
RCSTA_RX9_POSN equ 0006h
RCSTA_RX9_POSITION equ 0006h
RCSTA_RX9_SIZE equ 0001h
RCSTA_RX9_LENGTH equ 0001h
RCSTA_RX9_MASK equ 0040h
RCSTA_SPEN_POSN equ 0007h
RCSTA_SPEN_POSITION equ 0007h
RCSTA_SPEN_SIZE equ 0001h
RCSTA_SPEN_LENGTH equ 0001h
RCSTA_SPEN_MASK equ 0080h
RCSTA_ADDEN_POSN equ 0003h
RCSTA_ADDEN_POSITION equ 0003h
RCSTA_ADDEN_SIZE equ 0001h
RCSTA_ADDEN_LENGTH equ 0001h
RCSTA_ADDEN_MASK equ 0008h



TXREG equ 0019h



RCREG equ 001Ah



CMCON equ 001Fh

CMCON_CM_POSN equ 0000h
CMCON_CM_POSITION equ 0000h
CMCON_CM_SIZE equ 0003h
CMCON_CM_LENGTH equ 0003h
CMCON_CM_MASK equ 0007h
CMCON_CIS_POSN equ 0003h
CMCON_CIS_POSITION equ 0003h
CMCON_CIS_SIZE equ 0001h
CMCON_CIS_LENGTH equ 0001h
CMCON_CIS_MASK equ 0008h
CMCON_C1INV_POSN equ 0004h
CMCON_C1INV_POSITION equ 0004h
CMCON_C1INV_SIZE equ 0001h
CMCON_C1INV_LENGTH equ 0001h
CMCON_C1INV_MASK equ 0010h
CMCON_C2INV_POSN equ 0005h
CMCON_C2INV_POSITION equ 0005h
CMCON_C2INV_SIZE equ 0001h
CMCON_C2INV_LENGTH equ 0001h
CMCON_C2INV_MASK equ 0020h
CMCON_C1OUT_POSN equ 0006h
CMCON_C1OUT_POSITION equ 0006h
CMCON_C1OUT_SIZE equ 0001h
CMCON_C1OUT_LENGTH equ 0001h
CMCON_C1OUT_MASK equ 0040h
CMCON_C2OUT_POSN equ 0007h
CMCON_C2OUT_POSITION equ 0007h
CMCON_C2OUT_SIZE equ 0001h
CMCON_C2OUT_LENGTH equ 0001h
CMCON_C2OUT_MASK equ 0080h
CMCON_CM0_POSN equ 0000h
CMCON_CM0_POSITION equ 0000h
CMCON_CM0_SIZE equ 0001h
CMCON_CM0_LENGTH equ 0001h
CMCON_CM0_MASK equ 0001h
CMCON_CM1_POSN equ 0001h
CMCON_CM1_POSITION equ 0001h
CMCON_CM1_SIZE equ 0001h
CMCON_CM1_LENGTH equ 0001h
CMCON_CM1_MASK equ 0002h
CMCON_CM2_POSN equ 0002h
CMCON_CM2_POSITION equ 0002h
CMCON_CM2_SIZE equ 0001h
CMCON_CM2_LENGTH equ 0001h
CMCON_CM2_MASK equ 0004h



OPTION_REG equ 0081h

OPTION_REG_PS_POSN equ 0000h
OPTION_REG_PS_POSITION equ 0000h
OPTION_REG_PS_SIZE equ 0003h
OPTION_REG_PS_LENGTH equ 0003h
OPTION_REG_PS_MASK equ 0007h
OPTION_REG_PSA_POSN equ 0003h
OPTION_REG_PSA_POSITION equ 0003h
OPTION_REG_PSA_SIZE equ 0001h
OPTION_REG_PSA_LENGTH equ 0001h
OPTION_REG_PSA_MASK equ 0008h
OPTION_REG_T0SE_POSN equ 0004h
OPTION_REG_T0SE_POSITION equ 0004h
OPTION_REG_T0SE_SIZE equ 0001h
OPTION_REG_T0SE_LENGTH equ 0001h
OPTION_REG_T0SE_MASK equ 0010h
OPTION_REG_T0CS_POSN equ 0005h
OPTION_REG_T0CS_POSITION equ 0005h
OPTION_REG_T0CS_SIZE equ 0001h
OPTION_REG_T0CS_LENGTH equ 0001h
OPTION_REG_T0CS_MASK equ 0020h
OPTION_REG_INTEDG_POSN equ 0006h
OPTION_REG_INTEDG_POSITION equ 0006h
OPTION_REG_INTEDG_SIZE equ 0001h
OPTION_REG_INTEDG_LENGTH equ 0001h
OPTION_REG_INTEDG_MASK equ 0040h
OPTION_REG_nRBPU_POSN equ 0007h
OPTION_REG_nRBPU_POSITION equ 0007h
OPTION_REG_nRBPU_SIZE equ 0001h
OPTION_REG_nRBPU_LENGTH equ 0001h
OPTION_REG_nRBPU_MASK equ 0080h
OPTION_REG_PS0_POSN equ 0000h
OPTION_REG_PS0_POSITION equ 0000h
OPTION_REG_PS0_SIZE equ 0001h
OPTION_REG_PS0_LENGTH equ 0001h
OPTION_REG_PS0_MASK equ 0001h
OPTION_REG_PS1_POSN equ 0001h
OPTION_REG_PS1_POSITION equ 0001h
OPTION_REG_PS1_SIZE equ 0001h
OPTION_REG_PS1_LENGTH equ 0001h
OPTION_REG_PS1_MASK equ 0002h
OPTION_REG_PS2_POSN equ 0002h
OPTION_REG_PS2_POSITION equ 0002h
OPTION_REG_PS2_SIZE equ 0001h
OPTION_REG_PS2_LENGTH equ 0001h
OPTION_REG_PS2_MASK equ 0004h



TRISA equ 0085h

TRISA_TRISA0_POSN equ 0000h
TRISA_TRISA0_POSITION equ 0000h
TRISA_TRISA0_SIZE equ 0001h
TRISA_TRISA0_LENGTH equ 0001h
TRISA_TRISA0_MASK equ 0001h
TRISA_TRISA1_POSN equ 0001h
TRISA_TRISA1_POSITION equ 0001h
TRISA_TRISA1_SIZE equ 0001h
TRISA_TRISA1_LENGTH equ 0001h
TRISA_TRISA1_MASK equ 0002h
TRISA_TRISA2_POSN equ 0002h
TRISA_TRISA2_POSITION equ 0002h
TRISA_TRISA2_SIZE equ 0001h
TRISA_TRISA2_LENGTH equ 0001h
TRISA_TRISA2_MASK equ 0004h
TRISA_TRISA3_POSN equ 0003h
TRISA_TRISA3_POSITION equ 0003h
TRISA_TRISA3_SIZE equ 0001h
TRISA_TRISA3_LENGTH equ 0001h
TRISA_TRISA3_MASK equ 0008h
TRISA_TRISA4_POSN equ 0004h
TRISA_TRISA4_POSITION equ 0004h
TRISA_TRISA4_SIZE equ 0001h
TRISA_TRISA4_LENGTH equ 0001h
TRISA_TRISA4_MASK equ 0010h
TRISA_TRISA5_POSN equ 0005h
TRISA_TRISA5_POSITION equ 0005h
TRISA_TRISA5_SIZE equ 0001h
TRISA_TRISA5_LENGTH equ 0001h
TRISA_TRISA5_MASK equ 0020h
TRISA_TRISA6_POSN equ 0006h
TRISA_TRISA6_POSITION equ 0006h
TRISA_TRISA6_SIZE equ 0001h
TRISA_TRISA6_LENGTH equ 0001h
TRISA_TRISA6_MASK equ 0040h
TRISA_TRISA7_POSN equ 0007h
TRISA_TRISA7_POSITION equ 0007h
TRISA_TRISA7_SIZE equ 0001h
TRISA_TRISA7_LENGTH equ 0001h
TRISA_TRISA7_MASK equ 0080h



TRISB equ 0086h

TRISB_TRISB0_POSN equ 0000h
TRISB_TRISB0_POSITION equ 0000h
TRISB_TRISB0_SIZE equ 0001h
TRISB_TRISB0_LENGTH equ 0001h
TRISB_TRISB0_MASK equ 0001h
TRISB_TRISB1_POSN equ 0001h
TRISB_TRISB1_POSITION equ 0001h
TRISB_TRISB1_SIZE equ 0001h
TRISB_TRISB1_LENGTH equ 0001h
TRISB_TRISB1_MASK equ 0002h
TRISB_TRISB2_POSN equ 0002h
TRISB_TRISB2_POSITION equ 0002h
TRISB_TRISB2_SIZE equ 0001h
TRISB_TRISB2_LENGTH equ 0001h
TRISB_TRISB2_MASK equ 0004h
TRISB_TRISB3_POSN equ 0003h
TRISB_TRISB3_POSITION equ 0003h
TRISB_TRISB3_SIZE equ 0001h
TRISB_TRISB3_LENGTH equ 0001h
TRISB_TRISB3_MASK equ 0008h
TRISB_TRISB4_POSN equ 0004h
TRISB_TRISB4_POSITION equ 0004h
TRISB_TRISB4_SIZE equ 0001h
TRISB_TRISB4_LENGTH equ 0001h
TRISB_TRISB4_MASK equ 0010h
TRISB_TRISB5_POSN equ 0005h
TRISB_TRISB5_POSITION equ 0005h
TRISB_TRISB5_SIZE equ 0001h
TRISB_TRISB5_LENGTH equ 0001h
TRISB_TRISB5_MASK equ 0020h
TRISB_TRISB6_POSN equ 0006h
TRISB_TRISB6_POSITION equ 0006h
TRISB_TRISB6_SIZE equ 0001h
TRISB_TRISB6_LENGTH equ 0001h
TRISB_TRISB6_MASK equ 0040h
TRISB_TRISB7_POSN equ 0007h
TRISB_TRISB7_POSITION equ 0007h
TRISB_TRISB7_SIZE equ 0001h
TRISB_TRISB7_LENGTH equ 0001h
TRISB_TRISB7_MASK equ 0080h



PIE1 equ 008Ch

PIE1_TMR1IE_POSN equ 0000h
PIE1_TMR1IE_POSITION equ 0000h
PIE1_TMR1IE_SIZE equ 0001h
PIE1_TMR1IE_LENGTH equ 0001h
PIE1_TMR1IE_MASK equ 0001h
PIE1_TMR2IE_POSN equ 0001h
PIE1_TMR2IE_POSITION equ 0001h
PIE1_TMR2IE_SIZE equ 0001h
PIE1_TMR2IE_LENGTH equ 0001h
PIE1_TMR2IE_MASK equ 0002h
PIE1_CCP1IE_POSN equ 0002h
PIE1_CCP1IE_POSITION equ 0002h
PIE1_CCP1IE_SIZE equ 0001h
PIE1_CCP1IE_LENGTH equ 0001h
PIE1_CCP1IE_MASK equ 0004h
PIE1_TXIE_POSN equ 0004h
PIE1_TXIE_POSITION equ 0004h
PIE1_TXIE_SIZE equ 0001h
PIE1_TXIE_LENGTH equ 0001h
PIE1_TXIE_MASK equ 0010h
PIE1_RCIE_POSN equ 0005h
PIE1_RCIE_POSITION equ 0005h
PIE1_RCIE_SIZE equ 0001h
PIE1_RCIE_LENGTH equ 0001h
PIE1_RCIE_MASK equ 0020h
PIE1_CMIE_POSN equ 0006h
PIE1_CMIE_POSITION equ 0006h
PIE1_CMIE_SIZE equ 0001h
PIE1_CMIE_LENGTH equ 0001h
PIE1_CMIE_MASK equ 0040h
PIE1_EEIE_POSN equ 0007h
PIE1_EEIE_POSITION equ 0007h
PIE1_EEIE_SIZE equ 0001h
PIE1_EEIE_LENGTH equ 0001h
PIE1_EEIE_MASK equ 0080h



PCON equ 008Eh

PCON_nBOR_POSN equ 0000h
PCON_nBOR_POSITION equ 0000h
PCON_nBOR_SIZE equ 0001h
PCON_nBOR_LENGTH equ 0001h
PCON_nBOR_MASK equ 0001h
PCON_nPOR_POSN equ 0001h
PCON_nPOR_POSITION equ 0001h
PCON_nPOR_SIZE equ 0001h
PCON_nPOR_LENGTH equ 0001h
PCON_nPOR_MASK equ 0002h
PCON_OSCF_POSN equ 0003h
PCON_OSCF_POSITION equ 0003h
PCON_OSCF_SIZE equ 0001h
PCON_OSCF_LENGTH equ 0001h
PCON_OSCF_MASK equ 0008h
PCON_nBO_POSN equ 0000h
PCON_nBO_POSITION equ 0000h
PCON_nBO_SIZE equ 0001h
PCON_nBO_LENGTH equ 0001h
PCON_nBO_MASK equ 0001h
PCON_nBOD_POSN equ 0000h
PCON_nBOD_POSITION equ 0000h
PCON_nBOD_SIZE equ 0001h
PCON_nBOD_LENGTH equ 0001h
PCON_nBOD_MASK equ 0001h



PR2 equ 0092h



TXSTA equ 0098h

TXSTA_TX9D_POSN equ 0000h
TXSTA_TX9D_POSITION equ 0000h
TXSTA_TX9D_SIZE equ 0001h
TXSTA_TX9D_LENGTH equ 0001h
TXSTA_TX9D_MASK equ 0001h
TXSTA_TRMT_POSN equ 0001h
TXSTA_TRMT_POSITION equ 0001h
TXSTA_TRMT_SIZE equ 0001h
TXSTA_TRMT_LENGTH equ 0001h
TXSTA_TRMT_MASK equ 0002h
TXSTA_BRGH_POSN equ 0002h
TXSTA_BRGH_POSITION equ 0002h
TXSTA_BRGH_SIZE equ 0001h
TXSTA_BRGH_LENGTH equ 0001h
TXSTA_BRGH_MASK equ 0004h
TXSTA_SYNC_POSN equ 0004h
TXSTA_SYNC_POSITION equ 0004h
TXSTA_SYNC_SIZE equ 0001h
TXSTA_SYNC_LENGTH equ 0001h
TXSTA_SYNC_MASK equ 0010h
TXSTA_TXEN_POSN equ 0005h
TXSTA_TXEN_POSITION equ 0005h
TXSTA_TXEN_SIZE equ 0001h
TXSTA_TXEN_LENGTH equ 0001h
TXSTA_TXEN_MASK equ 0020h
TXSTA_TX9_POSN equ 0006h
TXSTA_TX9_POSITION equ 0006h
TXSTA_TX9_SIZE equ 0001h
TXSTA_TX9_LENGTH equ 0001h
TXSTA_TX9_MASK equ 0040h
TXSTA_CSRC_POSN equ 0007h
TXSTA_CSRC_POSITION equ 0007h
TXSTA_CSRC_SIZE equ 0001h
TXSTA_CSRC_LENGTH equ 0001h
TXSTA_CSRC_MASK equ 0080h



SPBRG equ 0099h



EEDATA equ 009Ah



EEADR equ 009Bh



EECON1 equ 009Ch

EECON1_RD_POSN equ 0000h
EECON1_RD_POSITION equ 0000h
EECON1_RD_SIZE equ 0001h
EECON1_RD_LENGTH equ 0001h
EECON1_RD_MASK equ 0001h
EECON1_WR_POSN equ 0001h
EECON1_WR_POSITION equ 0001h
EECON1_WR_SIZE equ 0001h
EECON1_WR_LENGTH equ 0001h
EECON1_WR_MASK equ 0002h
EECON1_WREN_POSN equ 0002h
EECON1_WREN_POSITION equ 0002h
EECON1_WREN_SIZE equ 0001h
EECON1_WREN_LENGTH equ 0001h
EECON1_WREN_MASK equ 0004h
EECON1_WRERR_POSN equ 0003h
EECON1_WRERR_POSITION equ 0003h
EECON1_WRERR_SIZE equ 0001h
EECON1_WRERR_LENGTH equ 0001h
EECON1_WRERR_MASK equ 0008h



EECON2 equ 009Dh



VRCON equ 009Fh

VRCON_VR_POSN equ 0000h
VRCON_VR_POSITION equ 0000h
VRCON_VR_SIZE equ 0004h
VRCON_VR_LENGTH equ 0004h
VRCON_VR_MASK equ 000Fh
VRCON_VRR_POSN equ 0005h
VRCON_VRR_POSITION equ 0005h
VRCON_VRR_SIZE equ 0001h
VRCON_VRR_LENGTH equ 0001h
VRCON_VRR_MASK equ 0020h
VRCON_VROE_POSN equ 0006h
VRCON_VROE_POSITION equ 0006h
VRCON_VROE_SIZE equ 0001h
VRCON_VROE_LENGTH equ 0001h
VRCON_VROE_MASK equ 0040h
VRCON_VREN_POSN equ 0007h
VRCON_VREN_POSITION equ 0007h
VRCON_VREN_SIZE equ 0001h
VRCON_VREN_LENGTH equ 0001h
VRCON_VREN_MASK equ 0080h
VRCON_VR0_POSN equ 0000h
VRCON_VR0_POSITION equ 0000h
VRCON_VR0_SIZE equ 0001h
VRCON_VR0_LENGTH equ 0001h
VRCON_VR0_MASK equ 0001h
VRCON_VR1_POSN equ 0001h
VRCON_VR1_POSITION equ 0001h
VRCON_VR1_SIZE equ 0001h
VRCON_VR1_LENGTH equ 0001h
VRCON_VR1_MASK equ 0002h
VRCON_VR2_POSN equ 0002h
VRCON_VR2_POSITION equ 0002h
VRCON_VR2_SIZE equ 0001h
VRCON_VR2_LENGTH equ 0001h
VRCON_VR2_MASK equ 0004h
VRCON_VR3_POSN equ 0003h
VRCON_VR3_POSITION equ 0003h
VRCON_VR3_SIZE equ 0001h
VRCON_VR3_LENGTH equ 0001h
VRCON_VR3_MASK equ 0008h
# 1066 "/opt/microchip/mplabx/v6.20/packs/Microchip/PIC16Fxxx_DFP/1.6.156/xc8/pic/include/proc/pic16f628a.inc" 3
psect udata_shr,class=COMMON,space=1,noexec
psect udata,class=RAM,space=1,noexec
psect udata_bank0,class=BANK0,space=1,noexec
psect udata_bank1,class=BANK1,space=1,noexec
psect udata_bank2,class=BANK2,space=1,noexec
psect code,class=CODE,space=0,delta=2
psect data,class=STRCODE,space=0,delta=2,noexec
psect edata,class=EEDATA,space=3,delta=2,noexec
# 164 "/opt/microchip/mplabx/v6.20/packs/Microchip/PIC16Fxxx_DFP/1.6.156/xc8/pic/include/pic_as_chip_select.inc" 2 3
# 5 "/opt/microchip/mplabx/v6.20/packs/Microchip/PIC16Fxxx_DFP/1.6.156/xc8/pic/include/pic.inc" 2 3



stk_offset SET 0
auto_size SET 0


; stack_auto defines a symbol /name/_offset which equates to the
; stack offset of the auto object in question

stack_auto MACRO name, size
name&_offset EQU stk_offset-size
stk_offset SET name&_offset
auto_size SET -stk_offset
ENDM


; stack_param defines a symbol /name/_offset which equates to the
; stack offset of the parameter object in question

stack_param MACRO name, size
name&_offset EQU stk_offset-size
stk_offset SET name&_offset
ENDM


; alloc_stack adjusts the SP to allocate space for auto objects
; it also links in to the btemp symbol so that can be used

alloc_stack MACRO
GLOBAL btemp
addfsr FSR1,auto_size
ENDM


; restore_stack adjusts the SP to remove all auto and parameter
; objects from the stack prior to returning from a function

restore_stack MACRO
addfsr FSR1,stk_offset
stk_offset SET 0
auto_size SET 0
ENDM
# 8 "/opt/microchip/xc8/v2.50/pic/include/xc.inc" 2 3
# 17 "main.asm" 2
 PSECT resetVec, class=CODE, delta=2

    resetVec:
    ; Start address
 PAGESEL main
 GOTO main

    PSECT code

    main:
 ; Temperature Conversion
 CALL reset_pulse
 CALL skip_rom
 CALL convert_t

 ; Temperature Read
 CALL reset_pulse
 CALL skip_rom
 CALL read_scratchpad

 ; UART Tx
 ;CALL uart_transmit

 GOTO main

    ; Tansmits the reset pulse
    reset_pulse:
 BANKSEL TRISB
 BCF TRISB, 1 ; Pull the bus low, in Tx mode
 CALL delay_loop
 BSF TRISB, 1 ; Release the bus, in Rx mode
 CALL delay_loop
 RETURN

    ; Send CCh
    skip_rom:
 CALL write_0
 CALL write_0
 CALL write_1
 CALL write_1
 CALL write_0
 CALL write_0
 CALL write_1
 CALL write_1
 RETURN

    ; Send 44h
    convert_t:
 CALL write_0
 CALL write_0
 CALL write_1
 CALL write_0
 CALL write_0
 CALL write_0
 CALL write_1
 CALL write_0
 CALL read_bit
 RETURN

    ; Send BEh
    read_scratchpad:
 CALL write_0
 CALL write_1
 CALL write_1
 CALL write_1
 CALL write_1
 CALL write_1
 CALL write_0
 CALL write_1
 CALL read_byte_0 ; Read byte 0
 CALL read_byte_1 ; Read byte 1
 CALL read_byte_2 ; Read byte 2
 CALL read_byte_3 ; Read byte 3
 CALL read_byte_4 ; Read byte 4
 CALL read_byte_5 ; Read byte 5
 CALL read_byte_6 ; Read byte 6
 CALL read_byte_7 ; Read byte 7
 CALL read_byte_8 ; Read byte 8
 CALL read_byte_8 ; Read byte 8
 CALL read_byte_8 ; Read byte 8
 RETURN

    write_1:
 BANKSEL TRISB
 BCF TRISB, 1 ; Pull the bus low
 CALL delay_io_1us
 BSF TRISB, 1 ; Release the bus
 CALL delay_io_60us
 RETURN

    write_0:
 BANKSEL TRISB
 BCF TRISB, 1
 CALL delay_io_60us ; Continue holding bus low without release
 BSF TRISB, 1 ; Release the bus
 CALL delay_io_1us ; 1us recovery time between slots
 RETURN

    ; A complete read time slot for reading one bit
    read_bit:
 BANKSEL TRISB
 BCF TRISB, 1 ; Pulling the bus low
 CALL delay_io_1us
 BSF TRISB, 1 ; Release the bus
 CALL delay_io_10us ; Locate the master sample time towards end
 RETURN

    ; Read byte 0, stored in 0xA4, value = TEMERATURE LSB
    read_byte_0:
 MOVLW 8
 MOVWF 0xAD ; Loop variable
 MOVLW 0
 MOVWF 0xA4 ; Initialize the reg storing data
 CALL read_bit ; Generate one read time slot
 CALL bit_sample_byte_0 ; Sampling the bus state
 DECFSZ 0xAD, F ; if (--i == 0) SKIP;
 GOTO $-3 ; Read the next bit
 RETURN

    ; Sample the bit transmitted by the sensor
    bit_sample_byte_0:
 BTFSS TRISB, 1 ; Sample the bus state within 15us, skip if set
 GOTO $+3
 BSF 0XA4, 7 ; Set bit 7 and shift right
 RRF 0XA4, F
 BCF 0XA4, 7 ; Clear bit 7 and shift right
 RRF 0XA4, F
 CALL delay_io_60us ; Make time slot duration at least 60 us
 RETURN

 ; Read byte 1, stored in 0xA5, value = TEMPERATUE MSB
    read_byte_1:
 MOVLW 8
 MOVWF 0xAD
 MOVLW 0
 MOVWF 0xA5
 CALL read_bit
 CALL bit_sample_byte_1
 DECFSZ 0xAD, F
 GOTO $-3
 RETURN

    bit_sample_byte_1:
 BTFSS TRISB, 1
 GOTO $+3
 BSF 0XA5, 7
 RRF 0XA5, F
 BCF 0XA5, 7
 RRF 0XA5, F
 CALL delay_io_60us
 RETURN

 ; Read byte 2, stored in 0xA6, value = HIGH ALARM TRIGGER REGISTER (EEPROM)
    read_byte_2:
 MOVLW 8
 MOVWF 0xAD
 MOVLW 0
 MOVWF 0xA6
 CALL read_bit
 CALL bit_sample_byte_2
 DECFSZ 0xAD, F
 GOTO $-3
 RETURN

    bit_sample_byte_2:
 BTFSS TRISB, 1
 GOTO $+3
 BSF 0XA6, 7
 RRF 0XA6, F
 BCF 0XA6, 7
 RRF 0XA6, F
 CALL delay_io_60us
 RETURN

 ; Read byte 3, stored in 0xA7, value = LOW ALARM TRIGGER REGISTER (EEPROM)
    read_byte_3:
 MOVLW 8
 MOVWF 0xAD
 MOVLW 0
 MOVWF 0xA7
 CALL read_bit
 CALL bit_sample_byte_3
 DECFSZ 0xAD, F
 GOTO $-3
 RETURN

    bit_sample_byte_3:
 BTFSS TRISB, 1
 GOTO $+3
 BSF 0XA7, 7
 RRF 0XA7, F
 BCF 0XA7, 7
 RRF 0XA7, F
 CALL delay_io_60us
 RETURN

 ; Read byte 4, stored in 0xA8, value = CONFIGURATION REGISTER (EEPROM)
    read_byte_4:
 MOVLW 8
 MOVWF 0xAD
 MOVLW 0
 MOVWF 0xA8
 CALL read_bit
 CALL bit_sample_byte_4
 DECFSZ 0xAD, F
 GOTO $-3
 RETURN

    bit_sample_byte_4:
 BTFSS TRISB, 1
 GOTO $+3
 BSF 0XA8, 7
 RRF 0XA8, F
 BCF 0XA8, 7
 RRF 0XA8, F
 CALL delay_io_60us
 RETURN

 ; Read byte 5, stored in 0xA9, value = RESERVED
    read_byte_5:
 MOVLW 8
 MOVWF 0xAD
 MOVLW 0
 MOVWF 0xA9
 CALL read_bit
 CALL bit_sample_byte_5
 DECFSZ 0xAD, F
 GOTO $-3
 RETURN

    bit_sample_byte_5:
 BTFSS TRISB, 1
 GOTO $+3
 BSF 0XA9, 7
 RRF 0XA9, F
 BCF 0XA9, 7
 RRF 0XA9, F
 CALL delay_io_60us
 RETURN

 ; Read byte 6, stored in 0xAA, value = RESERVED
    read_byte_6:
 MOVLW 8
 MOVWF 0xAD
 MOVLW 0
 MOVWF 0xAA
 CALL read_bit
 CALL bit_sample_byte_7
 DECFSZ 0xAD, F
 GOTO $-3
 RETURN

    bit_sample_byte_6:
 BTFSS TRISB, 1
 GOTO $+3
 BSF 0XA4, 7
 RRF 0XA4, F
 BCF 0XA4, 7
 RRF 0XA4, F
 CALL delay_io_60us
 RETURN

 ; Read byte 7, stored in 0xAB, value = RESERVED
    read_byte_7:
 MOVLW 8
 MOVWF 0xAD
 MOVLW 0
 MOVWF 0xAB
 CALL read_bit
 CALL bit_sample_byte_8
 DECFSZ 0xAD, F
 GOTO $-3
 RETURN

    bit_sample_byte_7:
 BTFSS TRISB, 1
 GOTO $+3
 BSF 0XAB, 7
 RRF 0XAB, F
 BCF 0XAB, 7
 RRF 0XAB, F
 CALL delay_io_60us
 RETURN

 ; Read byte 8, stored in 0xAC, value = CRC
    read_byte_8:
 MOVLW 8
 MOVWF 0xAD
 MOVLW 0
 MOVWF 0xAC
 CALL read_bit
 CALL bit_sample_byte_8
 DECFSZ 0xAD, F
 GOTO $-3
 RETURN

    bit_sample_byte_8:
 BTFSS TRISB, 1
 GOTO $+3
 BSF 0XAC, 7
 RRF 0XAC, F
 BCF 0XAC, 7
 RRF 0XAC, F
 CALL delay_io_60us
 RETURN

    delay_io_60us:
 MOVLW 99
 MOVWF 0xA3
 DECFSZ 0xA3, F
 GOTO $-1
 RETURN

    ; 10.2 us delay
    delay_io_10us:
 MOVLW 16
 MOVWF 0xAE
 DECFSZ 0xAE, F
 GOTO $-1
 RETURN

    ; 1.2 us delay
    delay_io_1us:
 MOVLW 1
 MOVWF 0xA2
 DECFSZ 0xA2, F
 GOTO $-1
 RETURN

    ; m * (3n + 8) + 2 where m = A1h
    ; When A1h = 4, A0h = 255, total cycles around 3094 = 618.8 us
    delay_loop:
 MOVLW 4
 MOVWF 0xA1
 CALL delay
 RETURN

    ; 3n + 8 where n = A0h - 1
    delay:
 MOVLW 255
 MOVWF 0xA0
 DECFSZ 0xA0, F
 GOTO $-1
 DECFSZ 0xA1, F
 GOTO delay
 RETURN

    ; UART Tx Set Up
    uart_transmit:
 ; Initialize pin TX, both should be set as inputs
 BANKSEL TRISB
 BSF TRISB, 2
 ; Initialize the SPBRG register for the appropriate baud rate
 BANKSEL TXSTA
 BCF TXSTA, 2 ; ((TXSTA) and 07Fh), 2 = 0 (low speed baud rate)
 BCF TXSTA, 4 ; Clear bit ((TXSTA) and 07Fh), 4 to enable serial port
 MOVLW 32 ; SPBRG = 32 for 20 MHz, 25 for 16 MHz
 BANKSEL SPBRG
 MOVWF SPBRG ; Initialize SPBRG reg for the baud rate
 ; Enable the async serial port
 BANKSEL RCSTA ; Select Bank 0
 BSF RCSTA, 7 ; Set bit ((RCSTA) and 07Fh), 7 to enable serial port
 ; Enable the transmissionOne
 BANKSEL TXSTA
 BSF TXSTA, 5 ; Set bit ((TXSTA) and 07Fh), 5 to enable transmission
 ; Start transmission
 CALL load
 RETURN

    ; Load data to the TXREG register and start transmission
    load:
 MOVF 0xA4, W ; Current byte read from the sensor
 CALL tx
 MOVLW 0X0D ; CR
 CALL tx
 MOVLW 0x0A ; LF
 CALL tx
 RETURN

    ; Transmit a byte
    tx:
 BANKSEL TXSTA ; Select Bank 1
 BTFSS TXSTA, 1 ; Test if if TSR is empty
 GOTO $-1 ; Continue checking until success
 BANKSEL TXREG
 MOVWF TXREG
 RETURN

    ; Decode the two byte read from the temperature register
    ; 0xB0 - LS byte raw
    ; 0xB1 - MS byte raw
    ; 0xC0 - int part
    ; 0xC1 - LS byte fraction
    ; 0xC2 - MS byte fraction
    decode_temp:
 ; Extract <7:4> from LS byte and <3:0> from MS byte to form the int part
 BANKSEL 0xA4
 RRF 0xA4, W ; W = LS_temp >> 1
 RRF 0xA4, W ; W = LS_temp >> 1
 RRF 0xA4, W ; W = LS_temp >> 1
 RRF 0xA4, W ; W = LS_temp >> 1
 CLRF 0xC0 ; int_part = 0
 MOVWF 0xC0 ; int_part = W

 RLF 0xA5, W ; W = MS_temp << 1
 RLF 0xA5, W ; W = MS_temp << 1
 RLF 0xA5, W ; W = MS_temp << 1
 RLF 0xA5, W ; W = MS_temp << 1
 IORWF 0xC0, F ; int_part |= W

 ; Check for MS byte bit 3 for +/-
 BANKSEL 0xA5
 BTFSS 0xA5, 3
 ; ...

    ; 0xE0 - remainder
    ; 0xE2 - copy of int part
    mod_by_10:
 MOVF 0xC0 ; W = int_part
 MOVWF 0xE2 ; copy_int_part = W
 MOVLW 10 ; W = 10
 SUBWF 0xE2, W ; W = copy_int_part - 10
 BTFSC STATUS, 0 ; if (copy_int_part < 0) return;
 RETURN ;
 MOVWF 0xE0 ; remainder = W
 GOTO mod_by_10 ;

    ; 0xE1 - quotient
    divide_by_10:
 SUBLW 10
 BTFSS STATUS, 0
 RETURN
 INCF 0xE1, F
 GOTO divide_by_10


    ; Preload the digit table
    ; 0xD0 - zero
    ; 0xD1 - one
    ; ...
    ; 0xD9 - nine
    compute_digit_table:
 CLRW
 ADDLW 0x30 ; W += 0x30
 MOVWF 0xD0 ; zero = W
 ADDLW 1 ; W += 1
 MOVWF 0xD1 ; one = W
 ADDLW 1 ; ...
 MOVWF 0xD2
 ADDLW 1
 MOVWF 0xD3
 ADDLW 1
 MOVWF 0xD4
 ADDLW 1
 MOVWF 0xD5
 ADDLW 1
 MOVWF 0xD6
 ADDLW 1
 MOVWF 0xD7
 ADDLW 1
 MOVWF 0xD8
 ADDLW 1 ; W += 1
 MOVWF 0xD9 ; nine = W

 END resetVec
