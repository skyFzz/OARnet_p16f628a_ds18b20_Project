

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Fri Jan 24 14:59:57 2025

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F628A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     5                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
     8                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    12                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2,group=2
    13                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    14                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2
    15                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2
    16                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    17                           	dabs	1,0x7E,2
    18     0000                     
    19                           ; Generated 12/10/2023 GMT
    20                           ; 
    21                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution. Publication is not required when
    35                           ;        this file is used in an embedded application.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC16F628A Definitions
    51                           ; 
    52                           ; SFR Addresses
    53     0004                     fsr             equ	4
    54     0004                     fsr0            equ	4
    55     0000                     indf            equ	0
    56     0000                     indf0           equ	0
    57     0002                     pc              equ	2
    58     0002                     pcl             equ	2
    59     000A                     pclath          equ	10
    60     0003                     status          equ	3
    61     0000                     INDF            equ	0	;# 
    62     0001                     TMR0            equ	1	;# 
    63     0002                     PCL             equ	2	;# 
    64     0003                     STATUS          equ	3	;# 
    65     0004                     FSR             equ	4	;# 
    66     0005                     PORTA           equ	5	;# 
    67     0006                     PORTB           equ	6	;# 
    68     000A                     PCLATH          equ	10	;# 
    69     000B                     INTCON          equ	11	;# 
    70     000C                     PIR1            equ	12	;# 
    71     000E                     TMR1            equ	14	;# 
    72     000E                     TMR1L           equ	14	;# 
    73     000F                     TMR1H           equ	15	;# 
    74     0010                     T1CON           equ	16	;# 
    75     0011                     TMR2            equ	17	;# 
    76     0012                     T2CON           equ	18	;# 
    77     0015                     CCPR1           equ	21	;# 
    78     0015                     CCPR1L          equ	21	;# 
    79     0016                     CCPR1H          equ	22	;# 
    80     0017                     CCP1CON         equ	23	;# 
    81     0018                     RCSTA           equ	24	;# 
    82     0019                     TXREG           equ	25	;# 
    83     001A                     RCREG           equ	26	;# 
    84     001F                     CMCON           equ	31	;# 
    85     0081                     OPTION_REG      equ	129	;# 
    86     0085                     TRISA           equ	133	;# 
    87     0086                     TRISB           equ	134	;# 
    88     008C                     PIE1            equ	140	;# 
    89     008E                     PCON            equ	142	;# 
    90     0092                     PR2             equ	146	;# 
    91     0098                     TXSTA           equ	152	;# 
    92     0099                     SPBRG           equ	153	;# 
    93     009A                     EEDATA          equ	154	;# 
    94     009B                     EEADR           equ	155	;# 
    95     009C                     EECON1          equ	156	;# 
    96     009D                     EECON2          equ	157	;# 
    97     009F                     VRCON           equ	159	;# 
    98     0000                     INDF            equ	0	;# 
    99     0001                     TMR0            equ	1	;# 
   100     0002                     PCL             equ	2	;# 
   101     0003                     STATUS          equ	3	;# 
   102     0004                     FSR             equ	4	;# 
   103     0005                     PORTA           equ	5	;# 
   104     0006                     PORTB           equ	6	;# 
   105     000A                     PCLATH          equ	10	;# 
   106     000B                     INTCON          equ	11	;# 
   107     000C                     PIR1            equ	12	;# 
   108     000E                     TMR1            equ	14	;# 
   109     000E                     TMR1L           equ	14	;# 
   110     000F                     TMR1H           equ	15	;# 
   111     0010                     T1CON           equ	16	;# 
   112     0011                     TMR2            equ	17	;# 
   113     0012                     T2CON           equ	18	;# 
   114     0015                     CCPR1           equ	21	;# 
   115     0015                     CCPR1L          equ	21	;# 
   116     0016                     CCPR1H          equ	22	;# 
   117     0017                     CCP1CON         equ	23	;# 
   118     0018                     RCSTA           equ	24	;# 
   119     0019                     TXREG           equ	25	;# 
   120     001A                     RCREG           equ	26	;# 
   121     001F                     CMCON           equ	31	;# 
   122     0081                     OPTION_REG      equ	129	;# 
   123     0085                     TRISA           equ	133	;# 
   124     0086                     TRISB           equ	134	;# 
   125     008C                     PIE1            equ	140	;# 
   126     008E                     PCON            equ	142	;# 
   127     0092                     PR2             equ	146	;# 
   128     0098                     TXSTA           equ	152	;# 
   129     0099                     SPBRG           equ	153	;# 
   130     009A                     EEDATA          equ	154	;# 
   131     009B                     EEADR           equ	155	;# 
   132     009C                     EECON1          equ	156	;# 
   133     009D                     EECON2          equ	157	;# 
   134     009F                     VRCON           equ	159	;# 
   135     0431                     _TRISB1         set	1073
   136                           
   137                           	psect	cinit
   138     07F3                     start_initialization:	
   139                           ; #config settings
   140                           
   141     07F3                     __initialization:
   142                           
   143                           ; Clear objects allocated to BANK0
   144     07F3  1283               	bcf	3,5	;RP0=0, select bank0
   145     07F4  1303               	bcf	3,6	;RP1=0, select bank0
   146     07F5  01A0               	clrf	__pbssBANK0& (0+127)
   147     07F6  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   148     07F7  01A2               	clrf	(__pbssBANK0+2)& (0+127)
   149     07F8  01A3               	clrf	(__pbssBANK0+3)& (0+127)
   150     07F9  01A4               	clrf	(__pbssBANK0+4)& (0+127)
   151     07FA  01A5               	clrf	(__pbssBANK0+5)& (0+127)
   152     07FB  01A6               	clrf	(__pbssBANK0+6)& (0+127)
   153     07FC  01A7               	clrf	(__pbssBANK0+7)& (0+127)
   154     07FD  01A8               	clrf	(__pbssBANK0+8)& (0+127)
   155     07FE                     end_of_initialization:	
   156                           ;End of C runtime variable initialization code
   157                           
   158     07FE                     __end_of__initialization:
   159     07FE  0183               	clrf	3
   160     07FF  2F30               	ljmp	_main	;jump to C main() function
   161                           
   162                           	psect	bssBANK0
   163     0020                     __pbssBANK0:
   164     0020                     _pad:
   165     0020                     	ds	9
   166                           
   167                           	psect	cstackCOMMON
   168     0070                     __pcstackCOMMON:
   169     0070                     ?_memset:
   170     0070                     ?_reset:	
   171                           ; 1 bytes @ 0x0
   172                           
   173     0070                     ?_skipRom:	
   174                           ; 1 bytes @ 0x0
   175                           
   176     0070                     ?_convertT:	
   177                           ; 1 bytes @ 0x0
   178                           
   179     0070                     ?_readPad:	
   180                           ; 1 bytes @ 0x0
   181                           
   182     0070                     ?_write0:	
   183                           ; 1 bytes @ 0x0
   184                           
   185     0070                     ?_write1:	
   186                           ; 1 bytes @ 0x0
   187                           
   188     0070                     ?_read_bit:	
   189                           ; 1 bytes @ 0x0
   190                           
   191     0070                     ?_main:	
   192                           ; 2 bytes @ 0x0
   193                           
   194     0070                     memset@dest:	
   195                           ; 2 bytes @ 0x0
   196                           
   197     0070                     ??_reset:	
   198                           ; 1 bytes @ 0x0
   199                           
   200     0070                     ??_write0:	
   201                           ; 1 bytes @ 0x0
   202                           
   203     0070                     ??_write1:	
   204                           ; 1 bytes @ 0x0
   205                           
   206                           
   207                           ; 1 bytes @ 0x0
   208     0070                     	ds	1
   209     0071                     memset@c:
   210     0071                     ??_skipRom:	
   211                           ; 2 bytes @ 0x1
   212                           
   213     0071                     ??_convertT:	
   214                           ; 1 bytes @ 0x1
   215                           
   216                           
   217                           ; 1 bytes @ 0x1
   218     0071                     	ds	1
   219     0072                     ??_read_bit:
   220                           
   221                           ; 1 bytes @ 0x2
   222     0072                     	ds	1
   223     0073                     read_bit@b:
   224     0073                     memset@n:	
   225                           ; 2 bytes @ 0x3
   226                           
   227                           
   228                           ; 2 bytes @ 0x3
   229     0073                     	ds	2
   230     0075                     memset@p:
   231     0075                     ??_memset:	
   232                           ; 1 bytes @ 0x5
   233                           
   234     0075                     ??_readPad:	
   235                           ; 1 bytes @ 0x5
   236                           
   237                           
   238                           ; 1 bytes @ 0x5
   239     0075                     	ds	1
   240     0076                     readPad@i:
   241                           
   242                           ; 2 bytes @ 0x6
   243     0076                     	ds	2
   244     0078                     readPad@j:
   245                           
   246                           ; 2 bytes @ 0x8
   247     0078                     	ds	2
   248     007A                     ??_main:
   249                           
   250                           	psect	maintext
   251     0730                     __pmaintext:	
   252                           ; 1 bytes @ 0xA
   253 ;;
   254 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   255 ;;
   256 ;; *************** function _main *****************
   257 ;; Defined at:
   258 ;;		line 37 in file "main.c"
   259 ;; Parameters:    Size  Location     Type
   260 ;;		None
   261 ;; Auto vars:     Size  Location     Type
   262 ;;		None
   263 ;; Return value:  Size  Location     Type
   264 ;;                  2   26[None  ] int 
   265 ;; Registers used:
   266 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   267 ;; Tracked objects:
   268 ;;		On entry : B00/0
   269 ;;		On exit  : 0/0
   270 ;;		Unchanged: 0/0
   271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   272 ;;      Params:         0       0       0       0
   273 ;;      Locals:         0       0       0       0
   274 ;;      Temps:          0       0       0       0
   275 ;;      Totals:         0       0       0       0
   276 ;;Total ram usage:        0 bytes
   277 ;; Hardware stack levels required when called: 2
   278 ;; This function calls:
   279 ;;		_convertT
   280 ;;		_memset
   281 ;;		_readPad
   282 ;;		_reset
   283 ;;		_skipRom
   284 ;; This function is called by:
   285 ;;		Startup code after reset
   286 ;; This function uses a non-reentrant model
   287 ;;
   288                           
   289     0730                     _main:	
   290                           ;psect for function _main
   291                           
   292     0730                     l769:	
   293                           ;incstack = 0
   294                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   295                           
   296                           
   297                           ;main.c: 38:  write0();
   298     0730  3020               	movlw	(low (_pad| 0))& (0+255)
   299     0731  00F0               	movwf	memset@dest
   300     0732  3000               	movlw	0
   301     0733  00F1               	movwf	memset@c
   302     0734  00F2               	movwf	memset@c+1
   303     0735  3009               	movlw	9
   304     0736  00F3               	movwf	memset@n
   305     0737  3000               	movlw	0
   306     0738  00F4               	movwf	memset@n+1
   307     0739  2741               	fcall	_memset
   308     073A                     l771:
   309                           
   310                           ;main.c: 40:  write1();
   311     073A  275A               	fcall	_reset
   312     073B                     l773:
   313                           
   314                           ;main.c: 41:  write0();
   315     073B  2705               	fcall	_skipRom
   316     073C                     l775:
   317                           
   318                           ;main.c: 42:  write0();
   319     073C  26FC               	fcall	_convertT
   320     073D                     l777:
   321                           
   322                           ;main.c: 44:  write1();
   323     073D  275A               	fcall	_reset
   324     073E                     l779:
   325                           
   326                           ;main.c: 45: }
   327     073E  2705               	fcall	_skipRom
   328     073F                     l781:
   329                           
   330                           ;main.c: 46: 
   331     073F  2799               	fcall	_readPad
   332     0740                     l27:
   333     0740  2800               	ljmp	start
   334     0741                     __end_of_main:
   335                           
   336                           	psect	text1
   337     0705                     __ptext1:	
   338 ;; *************** function _skipRom *****************
   339 ;; Defined at:
   340 ;;		line 58 in file "main.c"
   341 ;; Parameters:    Size  Location     Type
   342 ;;		None
   343 ;; Auto vars:     Size  Location     Type
   344 ;;		None
   345 ;; Return value:  Size  Location     Type
   346 ;;                  1    wreg      void 
   347 ;; Registers used:
   348 ;;		wreg, status,2, status,0, pclath, cstack
   349 ;; Tracked objects:
   350 ;;		On entry : 0/0
   351 ;;		On exit  : 0/0
   352 ;;		Unchanged: 0/0
   353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   354 ;;      Params:         0       0       0       0
   355 ;;      Locals:         0       0       0       0
   356 ;;      Temps:          0       0       0       0
   357 ;;      Totals:         0       0       0       0
   358 ;;Total ram usage:        0 bytes
   359 ;; Hardware stack levels used: 1
   360 ;; Hardware stack levels required when called: 1
   361 ;; This function calls:
   362 ;;		_write0
   363 ;;		_write1
   364 ;; This function is called by:
   365 ;;		_main
   366 ;; This function uses a non-reentrant model
   367 ;;
   368                           
   369     0705                     _skipRom:	
   370                           ;psect for function _skipRom
   371                           
   372     0705                     l737:	
   373                           ;incstack = 0
   374                           ; Regs used in _skipRom: [wreg+status,2+status,0+pclath+cstack]
   375                           
   376                           
   377                           ;main.c: 59:  write0();
   378     0705  270E               	fcall	_write0
   379                           
   380                           ;main.c: 60:  write1();
   381     0706  270E               	fcall	_write0
   382                           
   383                           ;main.c: 61:  write1();
   384     0707  271F               	fcall	_write1
   385                           
   386                           ;main.c: 62:  write1();
   387     0708  271F               	fcall	_write1
   388                           
   389                           ;main.c: 63:  write1();
   390     0709  270E               	fcall	_write0
   391                           
   392                           ;main.c: 64:  write1();
   393     070A  270E               	fcall	_write0
   394                           
   395                           ;main.c: 65:  write0();
   396     070B  271F               	fcall	_write1
   397                           
   398                           ;main.c: 66:  write1();
   399     070C  271F               	fcall	_write1
   400     070D                     l33:
   401     070D  0008               	return
   402     070E                     __end_of_skipRom:
   403                           
   404                           	psect	text2
   405     075A                     __ptext2:	
   406 ;; *************** function _reset *****************
   407 ;; Defined at:
   408 ;;		line 51 in file "main.c"
   409 ;; Parameters:    Size  Location     Type
   410 ;;		None
   411 ;; Auto vars:     Size  Location     Type
   412 ;;		None
   413 ;; Return value:  Size  Location     Type
   414 ;;                  1    wreg      void 
   415 ;; Registers used:
   416 ;;		wreg
   417 ;; Tracked objects:
   418 ;;		On entry : 0/0
   419 ;;		On exit  : 0/0
   420 ;;		Unchanged: 0/0
   421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   422 ;;      Params:         0       0       0       0
   423 ;;      Locals:         0       0       0       0
   424 ;;      Temps:          2       0       0       0
   425 ;;      Totals:         2       0       0       0
   426 ;;Total ram usage:        2 bytes
   427 ;; Hardware stack levels used: 1
   428 ;; This function calls:
   429 ;;		Nothing
   430 ;; This function is called by:
   431 ;;		_main
   432 ;; This function uses a non-reentrant model
   433 ;;
   434                           
   435     075A                     _reset:	
   436                           ;psect for function _reset
   437                           
   438     075A                     l731:	
   439                           ;incstack = 0
   440                           ; Regs used in _reset: [wreg]
   441                           
   442                           
   443                           ;main.c: 52:  write0();
   444     075A  1683               	bsf	3,5	;RP0=1, select bank1
   445     075B  1303               	bcf	3,6	;RP1=0, select bank1
   446     075C  1086               	bcf	6,1	;volatile
   447     075D                     l733:
   448                           
   449                           ;main.c: 53:  write0();
   450     075D  3003               	movlw	3
   451     075E  00F1               	movwf	??_reset+1
   452     075F  3097               	movlw	151
   453     0760  00F0               	movwf	??_reset
   454     0761                     u157:
   455     0761  0BF0               	decfsz	??_reset,f
   456     0762  2F61               	goto	u157
   457     0763  0BF1               	decfsz	??_reset+1,f
   458     0764  2F61               	goto	u157
   459     0765  2F66               	nop2
   460     0766                     l735:
   461                           
   462                           ;main.c: 54:  write1();
   463     0766  1683               	bsf	3,5	;RP0=1, select bank1
   464     0767  1303               	bcf	3,6	;RP1=0, select bank1
   465     0768  1486               	bsf	6,1	;volatile
   466                           
   467                           ;main.c: 55:  write0();
   468     0769  3003               	movlw	3
   469     076A  00F1               	movwf	??_reset+1
   470     076B  3097               	movlw	151
   471     076C  00F0               	movwf	??_reset
   472     076D                     u167:
   473     076D  0BF0               	decfsz	??_reset,f
   474     076E  2F6D               	goto	u167
   475     076F  0BF1               	decfsz	??_reset+1,f
   476     0770  2F6D               	goto	u167
   477     0771  2F72               	nop2
   478     0772                     l30:
   479     0772  0008               	return
   480     0773                     __end_of_reset:
   481                           
   482                           	psect	text3
   483     0799                     __ptext3:	
   484 ;; *************** function _readPad *****************
   485 ;; Defined at:
   486 ;;		line 80 in file "main.c"
   487 ;; Parameters:    Size  Location     Type
   488 ;;		None
   489 ;; Auto vars:     Size  Location     Type
   490 ;;  j               2    8[COMMON] int 
   491 ;;  i               2    6[COMMON] int 
   492 ;; Return value:  Size  Location     Type
   493 ;;                  1    wreg      void 
   494 ;; Registers used:
   495 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   496 ;; Tracked objects:
   497 ;;		On entry : 0/0
   498 ;;		On exit  : 0/0
   499 ;;		Unchanged: 0/0
   500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   501 ;;      Params:         0       0       0       0
   502 ;;      Locals:         4       0       0       0
   503 ;;      Temps:          1       0       0       0
   504 ;;      Totals:         5       0       0       0
   505 ;;Total ram usage:        5 bytes
   506 ;; Hardware stack levels used: 1
   507 ;; Hardware stack levels required when called: 1
   508 ;; This function calls:
   509 ;;		_read_bit
   510 ;;		_write0
   511 ;;		_write1
   512 ;; This function is called by:
   513 ;;		_main
   514 ;; This function uses a non-reentrant model
   515 ;;
   516                           
   517     0799                     _readPad:	
   518                           ;psect for function _readPad
   519                           
   520     0799                     l741:	
   521                           ;incstack = 0
   522                           ; Regs used in _readPad: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   523                           
   524                           
   525                           ;main.c: 81: void write1() {
   526     0799  270E               	fcall	_write0
   527                           
   528                           ;main.c: 82:  TRISB1 = 0;
   529     079A  271F               	fcall	_write1
   530                           
   531                           ;main.c: 83:  _delay((unsigned long)((5)*(16000000/4000000.0)));
   532     079B  271F               	fcall	_write1
   533                           
   534                           ;main.c: 84:  TRISB1 = 1;
   535     079C  271F               	fcall	_write1
   536                           
   537                           ;main.c: 85:  _delay((unsigned long)((90)*(16000000/4000000.0)));
   538     079D  271F               	fcall	_write1
   539                           
   540                           ;main.c: 86: }
   541     079E  271F               	fcall	_write1
   542                           
   543                           ;main.c: 87: 
   544     079F  270E               	fcall	_write0
   545                           
   546                           ;main.c: 88: 
   547     07A0  271F               	fcall	_write1
   548     07A1                     l743:
   549                           
   550                           ;main.c: 91:  _delay((unsigned long)((90)*(16000000/4000000.0)));
   551     07A1  01F6               	clrf	readPad@i
   552     07A2  01F7               	clrf	readPad@i+1
   553     07A3                     l749:
   554                           
   555                           ;main.c: 92:  TRISB1 = 1;
   556     07A3  01F8               	clrf	readPad@j
   557     07A4  01F9               	clrf	readPad@j+1
   558     07A5                     l755:
   559                           
   560                           ;main.c: 93:  _delay((unsigned long)((5)*(16000000/4000000.0)));
   561     07A5  2773               	fcall	_read_bit
   562     07A6  0870               	movf	?_read_bit,w
   563     07A7  0471               	iorwf	?_read_bit+1,w
   564     07A8  1903               	btfsc	3,2
   565     07A9  2FAB               	goto	u101
   566     07AA  2FAC               	goto	u100
   567     07AB                     u101:
   568     07AB  2FBC               	goto	l759
   569     07AC                     u100:
   570     07AC                     l757:
   571                           
   572                           ;main.c: 94: }
   573     07AC  0876               	movf	readPad@i,w
   574     07AD  3E20               	addlw	(low (_pad| 0))& (0+255)
   575     07AE  0084               	movwf	4
   576     07AF  3001               	movlw	1
   577     07B0  00F5               	movwf	??_readPad
   578     07B1  0A78               	incf	readPad@j,w
   579     07B2  2FB5               	goto	u114
   580     07B3                     u115:
   581     07B3  1003               	clrc
   582     07B4  0DF5               	rlf	??_readPad,f
   583     07B5                     u114:
   584     07B5  3EFF               	addlw	-1
   585     07B6  1D03               	skipz
   586     07B7  2FB3               	goto	u115
   587     07B8  0875               	movf	??_readPad,w
   588     07B9  1383               	bcf	3,7	;select IRP bank0
   589     07BA  0480               	iorwf	0,f
   590                           
   591                           ;main.c: 95: 
   592     07BB  2FCC               	goto	l761
   593     07BC                     l759:
   594                           
   595                           ;main.c: 96: 
   596     07BC  0876               	movf	readPad@i,w
   597     07BD  3E20               	addlw	(low (_pad| 0))& (0+255)
   598     07BE  0084               	movwf	4
   599     07BF  3001               	movlw	1
   600     07C0  00F5               	movwf	??_readPad
   601     07C1  0A78               	incf	readPad@j,w
   602     07C2  2FC5               	goto	u124
   603     07C3                     u125:
   604     07C3  1003               	clrc
   605     07C4  0DF5               	rlf	??_readPad,f
   606     07C5                     u124:
   607     07C5  3EFF               	addlw	-1
   608     07C6  1D03               	skipz
   609     07C7  2FC3               	goto	u125
   610     07C8  0875               	movf	??_readPad,w
   611     07C9  3AFF               	xorlw	255
   612     07CA  1383               	bcf	3,7	;select IRP bank0
   613     07CB  0580               	andwf	0,f
   614     07CC                     l761:
   615                           
   616                           ;main.c: 98:  int b = 0;
   617     07CC  3001               	movlw	1
   618     07CD  07F8               	addwf	readPad@j,f
   619     07CE  1803               	skipnc
   620     07CF  0AF9               	incf	readPad@j+1,f
   621     07D0  3000               	movlw	0
   622     07D1  07F9               	addwf	readPad@j+1,f
   623     07D2                     l763:
   624     07D2  0879               	movf	readPad@j+1,w
   625     07D3  3A80               	xorlw	128
   626     07D4  00FF               	movwf	btemp+1
   627     07D5  3080               	movlw	128
   628     07D6  027F               	subwf	btemp+1,w
   629     07D7  1D03               	skipz
   630     07D8  2FDB               	goto	u135
   631     07D9  3008               	movlw	8
   632     07DA  0278               	subwf	readPad@j,w
   633     07DB                     u135:
   634     07DB  1C03               	skipc
   635     07DC  2FDE               	goto	u131
   636     07DD  2FDF               	goto	u130
   637     07DE                     u131:
   638     07DE  2FA5               	goto	l755
   639     07DF                     u130:
   640     07DF                     l765:
   641                           
   642                           ;main.c: 99:  TRISB1 = 0;
   643     07DF  3001               	movlw	1
   644     07E0  07F6               	addwf	readPad@i,f
   645     07E1  1803               	skipnc
   646     07E2  0AF7               	incf	readPad@i+1,f
   647     07E3  3000               	movlw	0
   648     07E4  07F7               	addwf	readPad@i+1,f
   649     07E5                     l767:
   650     07E5  0877               	movf	readPad@i+1,w
   651     07E6  3A80               	xorlw	128
   652     07E7  00FF               	movwf	btemp+1
   653     07E8  3080               	movlw	128
   654     07E9  027F               	subwf	btemp+1,w
   655     07EA  1D03               	skipz
   656     07EB  2FEE               	goto	u145
   657     07EC  3009               	movlw	9
   658     07ED  0276               	subwf	readPad@i,w
   659     07EE                     u145:
   660     07EE  1C03               	skipc
   661     07EF  2FF1               	goto	u141
   662     07F0  2FF2               	goto	u140
   663     07F1                     u141:
   664     07F1  2FA3               	goto	l749
   665     07F2                     u140:
   666     07F2                     l45:
   667     07F2  0008               	return
   668     07F3                     __end_of_readPad:
   669                           
   670                           	psect	text4
   671     0773                     __ptext4:	
   672 ;; *************** function _read_bit *****************
   673 ;; Defined at:
   674 ;;		line 119 in file "main.c"
   675 ;; Parameters:    Size  Location     Type
   676 ;;		None
   677 ;; Auto vars:     Size  Location     Type
   678 ;;  b               2    3[COMMON] int 
   679 ;; Return value:  Size  Location     Type
   680 ;;                  2    0[COMMON] int 
   681 ;; Registers used:
   682 ;;		wreg, status,2
   683 ;; Tracked objects:
   684 ;;		On entry : 0/0
   685 ;;		On exit  : 0/0
   686 ;;		Unchanged: 0/0
   687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   688 ;;      Params:         2       0       0       0
   689 ;;      Locals:         2       0       0       0
   690 ;;      Temps:          1       0       0       0
   691 ;;      Totals:         5       0       0       0
   692 ;;Total ram usage:        5 bytes
   693 ;; Hardware stack levels used: 1
   694 ;; This function calls:
   695 ;;		Nothing
   696 ;; This function is called by:
   697 ;;		_readPad
   698 ;; This function uses a non-reentrant model
   699 ;;
   700                           
   701     0773                     _read_bit:	
   702                           ;psect for function _read_bit
   703                           
   704     0773                     l707:	
   705                           ;incstack = 0
   706                           ; Regs used in _read_bit: [wreg+status,2]
   707                           
   708     0773  01F3               	clrf	read_bit@b
   709     0774  01F4               	clrf	read_bit@b+1
   710     0775                     l709:
   711     0775  1683               	bsf	3,5	;RP0=1, select bank1
   712     0776  1303               	bcf	3,6	;RP1=0, select bank1
   713     0777  1086               	bcf	6,1	;volatile
   714     0778                     l711:
   715     0778  3006               	movlw	6
   716     0779  00F2               	movwf	??_read_bit
   717     077A                     u177:
   718     077A  0BF2               	decfsz	??_read_bit,f
   719     077B  2F7A               	goto	u177
   720     077C  0000               	nop
   721     077D                     l713:
   722     077D  1683               	bsf	3,5	;RP0=1, select bank1
   723     077E  1303               	bcf	3,6	;RP1=0, select bank1
   724     077F  1486               	bsf	6,1	;volatile
   725     0780                     l715:
   726     0780  3006               	movlw	6
   727     0781  00F2               	movwf	??_read_bit
   728     0782                     u187:
   729     0782  0BF2               	decfsz	??_read_bit,f
   730     0783  2F82               	goto	u187
   731     0784  0000               	nop
   732     0785                     l717:
   733     0785  1683               	bsf	3,5	;RP0=1, select bank1
   734     0786  1303               	bcf	3,6	;RP1=0, select bank1
   735     0787  1C86               	btfss	6,1	;volatile
   736     0788  2F8A               	goto	u81
   737     0789  2F8B               	goto	u80
   738     078A                     u81:
   739     078A  2F8F               	goto	l54
   740     078B                     u80:
   741     078B                     l719:
   742     078B  3001               	movlw	1
   743     078C  00F3               	movwf	read_bit@b
   744     078D  3000               	movlw	0
   745     078E  00F4               	movwf	read_bit@b+1
   746     078F                     l54:
   747     078F  3042               	movlw	66
   748     0790  00F2               	movwf	??_read_bit
   749     0791                     u197:
   750     0791  0BF2               	decfsz	??_read_bit,f
   751     0792  2F91               	goto	u197
   752     0793  0000               	nop
   753     0794  0874               	movf	read_bit@b+1,w
   754     0795  00F1               	movwf	?_read_bit+1
   755     0796  0873               	movf	read_bit@b,w
   756     0797  00F0               	movwf	?_read_bit
   757     0798                     l55:
   758     0798  0008               	return
   759     0799                     __end_of_read_bit:
   760                           
   761                           	psect	text5
   762     0741                     __ptext5:	
   763 ;; *************** function _memset *****************
   764 ;; Defined at:
   765 ;;		line 3 in file "/opt/microchip/xc8/v2.50/pic/sources/c99/common/memset.c"
   766 ;; Parameters:    Size  Location     Type
   767 ;;  dest            1    0[COMMON] PTR void 
   768 ;;		 -> pad(9), 
   769 ;;  c               2    1[COMMON] int 
   770 ;;  n               2    3[COMMON] unsigned int 
   771 ;; Auto vars:     Size  Location     Type
   772 ;;  p               1    5[COMMON] PTR unsigned char 
   773 ;;		 -> pad(9), 
   774 ;; Return value:  Size  Location     Type
   775 ;;                  1    0[COMMON] PTR void 
   776 ;; Registers used:
   777 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   778 ;; Tracked objects:
   779 ;;		On entry : 0/0
   780 ;;		On exit  : 0/0
   781 ;;		Unchanged: 0/0
   782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   783 ;;      Params:         5       0       0       0
   784 ;;      Locals:         1       0       0       0
   785 ;;      Temps:          0       0       0       0
   786 ;;      Totals:         6       0       0       0
   787 ;;Total ram usage:        6 bytes
   788 ;; Hardware stack levels used: 1
   789 ;; This function calls:
   790 ;;		Nothing
   791 ;; This function is called by:
   792 ;;		_main
   793 ;; This function uses a non-reentrant model
   794 ;;
   795                           
   796     0741                     _memset:	
   797                           ;psect for function _memset
   798                           
   799     0741                     l723:	
   800                           ;incstack = 0
   801                           ; Regs used in _memset: [wreg-fsr0h+status,2+status,0]
   802                           
   803     0741  0870               	movf	memset@dest,w
   804     0742  00F5               	movwf	memset@p
   805     0743  2F4B               	goto	l729
   806     0744                     l725:
   807     0744  0875               	movf	memset@p,w
   808     0745  0084               	movwf	4
   809     0746  0871               	movf	memset@c,w
   810     0747  1383               	bcf	3,7	;select IRP bank0
   811     0748  0080               	movwf	0
   812     0749                     l727:
   813     0749  3001               	movlw	1
   814     074A  07F5               	addwf	memset@p,f
   815     074B                     l729:
   816     074B  3001               	movlw	1
   817     074C  02F3               	subwf	memset@n,f
   818     074D  3000               	movlw	0
   819     074E  1C03               	skipc
   820     074F  03F4               	decf	memset@n+1,f
   821     0750  02F4               	subwf	memset@n+1,f
   822     0751  0A73               	incf	memset@n,w
   823     0752  1D03               	skipz
   824     0753  2F58               	goto	u91
   825     0754  0A74               	incf	memset@n+1,w
   826     0755  1D03               	btfss	3,2
   827     0756  2F58               	goto	u91
   828     0757  2F59               	goto	u90
   829     0758                     u91:
   830     0758  2F44               	goto	l725
   831     0759                     u90:
   832     0759                     l603:
   833     0759  0008               	return
   834     075A                     __end_of_memset:
   835                           
   836                           	psect	text6
   837     06FC                     __ptext6:	
   838 ;; *************** function _convertT *****************
   839 ;; Defined at:
   840 ;;		line 69 in file "main.c"
   841 ;; Parameters:    Size  Location     Type
   842 ;;		None
   843 ;; Auto vars:     Size  Location     Type
   844 ;;		None
   845 ;; Return value:  Size  Location     Type
   846 ;;                  1    wreg      void 
   847 ;; Registers used:
   848 ;;		wreg, status,2, status,0, pclath, cstack
   849 ;; Tracked objects:
   850 ;;		On entry : 0/0
   851 ;;		On exit  : 0/0
   852 ;;		Unchanged: 0/0
   853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   854 ;;      Params:         0       0       0       0
   855 ;;      Locals:         0       0       0       0
   856 ;;      Temps:          0       0       0       0
   857 ;;      Totals:         0       0       0       0
   858 ;;Total ram usage:        0 bytes
   859 ;; Hardware stack levels used: 1
   860 ;; Hardware stack levels required when called: 1
   861 ;; This function calls:
   862 ;;		_write0
   863 ;;		_write1
   864 ;; This function is called by:
   865 ;;		_main
   866 ;; This function uses a non-reentrant model
   867 ;;
   868                           
   869     06FC                     _convertT:	
   870                           ;psect for function _convertT
   871                           
   872     06FC                     l739:	
   873                           ;incstack = 0
   874                           ; Regs used in _convertT: [wreg+status,2+status,0+pclath+cstack]
   875                           
   876                           
   877                           ;main.c: 70:   for (int j = 0; j < 8; j++) {
   878     06FC  270E               	fcall	_write0
   879                           
   880                           ;main.c: 71:    if (read_bit()) {
   881     06FD  270E               	fcall	_write0
   882                           
   883                           ;main.c: 72:     ((pad[i]) |= 1UL << (j));
   884     06FE  271F               	fcall	_write1
   885                           
   886                           ;main.c: 73:    } else {
   887     06FF  270E               	fcall	_write0
   888                           
   889                           ;main.c: 74:     ((pad[i]) &= ~(1UL << (j)));
   890     0700  270E               	fcall	_write0
   891                           
   892                           ;main.c: 75:    }
   893     0701  270E               	fcall	_write0
   894                           
   895                           ;main.c: 76:   }
   896     0702  271F               	fcall	_write1
   897                           
   898                           ;main.c: 77:  }
   899     0703  270E               	fcall	_write0
   900     0704                     l36:
   901     0704  0008               	return
   902     0705                     __end_of_convertT:
   903                           
   904                           	psect	text7
   905     071F                     __ptext7:	
   906 ;; *************** function _write1 *****************
   907 ;; Defined at:
   908 ;;		line 103 in file "main.c"
   909 ;; Parameters:    Size  Location     Type
   910 ;;		None
   911 ;; Auto vars:     Size  Location     Type
   912 ;;		None
   913 ;; Return value:  Size  Location     Type
   914 ;;                  1    wreg      void 
   915 ;; Registers used:
   916 ;;		wreg
   917 ;; Tracked objects:
   918 ;;		On entry : 0/0
   919 ;;		On exit  : 0/0
   920 ;;		Unchanged: 0/0
   921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   922 ;;      Params:         0       0       0       0
   923 ;;      Locals:         0       0       0       0
   924 ;;      Temps:          1       0       0       0
   925 ;;      Totals:         1       0       0       0
   926 ;;Total ram usage:        1 bytes
   927 ;; Hardware stack levels used: 1
   928 ;; This function calls:
   929 ;;		Nothing
   930 ;; This function is called by:
   931 ;;		_skipRom
   932 ;;		_convertT
   933 ;;		_readPad
   934 ;; This function uses a non-reentrant model
   935 ;;
   936                           
   937     071F                     _write1:	
   938                           ;psect for function _write1
   939                           
   940     071F                     l701:	
   941                           ;incstack = 0
   942                           ; Regs used in _write1: [wreg]
   943                           
   944                           
   945                           ;main.c: 104:   b = 1;
   946     071F  1683               	bsf	3,5	;RP0=1, select bank1
   947     0720  1303               	bcf	3,6	;RP1=0, select bank1
   948     0721  1086               	bcf	6,1	;volatile
   949     0722                     l703:
   950                           
   951                           ;main.c: 105:  }
   952     0722  3006               	movlw	6
   953     0723  00F0               	movwf	??_write1
   954     0724                     u207:
   955     0724  0BF0               	decfsz	??_write1,f
   956     0725  2F24               	goto	u207
   957     0726  0000               	nop
   958     0727                     l705:
   959                           
   960                           ;main.c: 106:  _delay((unsigned long)((50)*(16000000/4000000.0)));
   961     0727  1683               	bsf	3,5	;RP0=1, select bank1
   962     0728  1303               	bcf	3,6	;RP1=0, select bank1
   963     0729  1486               	bsf	6,1	;volatile
   964                           
   965                           ;main.c: 107:  return b;
   966     072A  3077               	movlw	119
   967     072B  00F0               	movwf	??_write1
   968     072C                     u217:
   969     072C  0BF0               	decfsz	??_write1,f
   970     072D  2F2C               	goto	u217
   971     072E  2F2F               	nop2
   972     072F                     l48:
   973     072F  0008               	return
   974     0730                     __end_of_write1:
   975                           
   976                           	psect	text8
   977     070E                     __ptext8:	
   978 ;; *************** function _write0 *****************
   979 ;; Defined at:
   980 ;;		line 111 in file "main.c"
   981 ;; Parameters:    Size  Location     Type
   982 ;;		None
   983 ;; Auto vars:     Size  Location     Type
   984 ;;		None
   985 ;; Return value:  Size  Location     Type
   986 ;;                  1    wreg      void 
   987 ;; Registers used:
   988 ;;		wreg
   989 ;; Tracked objects:
   990 ;;		On entry : 0/0
   991 ;;		On exit  : 0/0
   992 ;;		Unchanged: 0/0
   993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   994 ;;      Params:         0       0       0       0
   995 ;;      Locals:         0       0       0       0
   996 ;;      Temps:          1       0       0       0
   997 ;;      Totals:         1       0       0       0
   998 ;;Total ram usage:        1 bytes
   999 ;; Hardware stack levels used: 1
  1000 ;; This function calls:
  1001 ;;		Nothing
  1002 ;; This function is called by:
  1003 ;;		_skipRom
  1004 ;;		_convertT
  1005 ;;		_readPad
  1006 ;; This function uses a non-reentrant model
  1007 ;;
  1008                           
  1009     070E                     _write0:	
  1010                           ;psect for function _write0
  1011                           
  1012     070E                     l695:	
  1013                           ;incstack = 0
  1014                           ; Regs used in _write0: [wreg]
  1015                           
  1016     070E  1683               	bsf	3,5	;RP0=1, select bank1
  1017     070F  1303               	bcf	3,6	;RP1=0, select bank1
  1018     0710  1086               	bcf	6,1	;volatile
  1019     0711                     l697:
  1020     0711  3077               	movlw	119
  1021     0712  00F0               	movwf	??_write0
  1022     0713                     u227:
  1023     0713  0BF0               	decfsz	??_write0,f
  1024     0714  2F13               	goto	u227
  1025     0715  2F16               	nop2
  1026     0716                     l699:
  1027     0716  1683               	bsf	3,5	;RP0=1, select bank1
  1028     0717  1303               	bcf	3,6	;RP1=0, select bank1
  1029     0718  1486               	bsf	6,1	;volatile
  1030     0719  3006               	movlw	6
  1031     071A  00F0               	movwf	??_write0
  1032     071B                     u237:
  1033     071B  0BF0               	decfsz	??_write0,f
  1034     071C  2F1B               	goto	u237
  1035     071D  0000               	nop
  1036     071E                     l51:
  1037     071E  0008               	return
  1038     071F                     __end_of_write0:
  1039     0000                     ___latbits      equ	0
  1040     007E                     btemp           set	126	;btemp
  1041     007E                     wtemp0          set	126
  1042                           
  1043                           	psect	config
  1044                           
  1045                           ;Config register CONFIG @ 0x2007
  1046                           ;	Oscillator Selection bits
  1047                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
  1048                           ;	Watchdog Timer Enable bit
  1049                           ;	WDTE = OFF, WDT disabled
  1050                           ;	Power-up Timer Enable bit
  1051                           ;	PWRTE = OFF, PWRT disabled
  1052                           ;	RA5/MCLR/VPP Pin Function Select bit
  1053                           ;	MCLRE = OFF, RA5/MCLR/VPP pin function is digital input, MCLR internally tied to VDD
  1054                           ;	Brown-out Detect Enable bit
  1055                           ;	BOREN = OFF, BOD disabled
  1056                           ;	Low-Voltage Programming Enable bit
  1057                           ;	LVP = OFF, RB4/PGM pin has digital I/O function, HV on MCLR must be used for programmi
      +                          ng
  1058                           ;	Data EE Memory Code Protection bit
  1059                           ;	CPD = OFF, Data memory code protection off
  1060                           ;	Flash Program Memory Code Protection bit
  1061                           ;	CP = OFF, Code protection off
  1062     2007                     	org	8199
  1063     2007  3F0A               	dw	16138

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         9
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      10
    BANK0            80      0       9
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    memset@dest	PTR void  size(1) Largest target is 9
		 -> pad(BANK0[9]), 

    memset@p	PTR unsigned char  size(1) Largest target is 9
		 -> pad(BANK0[9]), 

    sp__memset	PTR void  size(1) Largest target is 9
		 -> pad(BANK0[9]), 


Critical Paths under _main in COMMON

    _main->_readPad
    _skipRom->_write0
    _skipRom->_write1
    _readPad->_read_bit
    _convertT->_write0
    _convertT->_write1

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     303
                           _convertT
                             _memset
                            _readPad
                              _reset
                            _skipRom
 ---------------------------------------------------------------------------------
 (1) _skipRom                                              0     0      0       0
                             _write0
                             _write1
 ---------------------------------------------------------------------------------
 (1) _reset                                                2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _readPad                                              5     5      0     204
                                              5 COMMON     5     5      0
                           _read_bit
                             _write0
                             _write1
 ---------------------------------------------------------------------------------
 (2) _read_bit                                             5     3      2      24
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _memset                                               6     1      5      99
                                              0 COMMON     6     1      5
 ---------------------------------------------------------------------------------
 (1) _convertT                                             0     0      0       0
                             _write0
                             _write1
 ---------------------------------------------------------------------------------
 (2) _write1                                               1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _write0                                               1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _convertT
     _write0
     _write1
   _memset
   _readPad
     _read_bit
     _write0
     _write1
   _reset
   _skipRom
     _write0
     _write1

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           14      0       0      0.0%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK2            48      0       0      0.0%
COMMON              14     10      10     71.4%
BANK0               80      0       9     11.2%
BANK1               80      0       0      0.0%
BANK2               48      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0      19      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Fri Jan 24 14:59:57 2025

                     l30 0772                       l33 070D                       l51 071E  
                     l27 0740                       l36 0704                       l45 07F2  
                     l54 078F                       l55 0798                       l48 072F  
                     u80 078B                       u81 078A                       u90 0759  
                     u91 0758                      l603 0759                      l701 071F  
                    l703 0722                      l711 0778                      l705 0727  
                    l713 077D                      l723 0741                      l715 0780  
                    l707 0773                      l731 075A                      l725 0744  
                    l717 0785                      l709 0775                      l741 0799  
                    l733 075D                      l727 0749                      l719 078B  
                    l743 07A1                      l735 0766                      l729 074B  
                    l761 07CC                      l737 0705                      l739 06FC  
                    l763 07D2                      l755 07A5                      l771 073A  
                    l765 07DF                      l757 07AC                      l749 07A3  
                    l781 073F                      l773 073B                      l695 070E  
                    l767 07E5                      l759 07BC                      l775 073C  
                    l697 0711                      l777 073D                      l769 0730  
                    l699 0716                      l779 073E                      u100 07AC  
                    u101 07AB                      u130 07DF                      u114 07B5  
                    u131 07DE                      u115 07B3                      u140 07F2  
                    u124 07C5                      u141 07F1                      u125 07C3  
                    u207 0724                      u135 07DB                      u217 072C  
                    u145 07EE                      u227 0713                      u237 071B  
                    u157 0761                      u167 076D                      u177 077A  
                    u187 0782                      u197 0791                      _pad 0020  
                    fsr0 0004                      indf 0000                     _main 0730  
                   btemp 007E                     start 0000                    ?_main 0070  
        __end_of_readPad 07F3                    _reset 075A          __end_of_skipRom 070E  
                  status 0003                    wtemp0 007E          __initialization 07F3  
           __end_of_main 0741                   ??_main 007A                   ?_reset 0070  
                 _TRISB1 0431         __end_of_convertT 0705                   _memset 0741  
       __end_of_read_bit 0799                   _write0 070E                   _write1 071F  
              ??_readPad 0075                ??_skipRom 0071  __end_of__initialization 07FE  
         __pcstackCOMMON 0070            __end_of_reset 0773                  ??_reset 0070  
             __pbssBANK0 0020               __pmaintext 0730                  ?_memset 0070  
                ?_write0 0070                  ?_write1 0070                ?_convertT 0070  
              ?_read_bit 0070                  __ptext1 0705                  __ptext2 075A  
                __ptext3 0799                  __ptext4 0773                  __ptext5 0741  
                __ptext6 06FC                  __ptext7 071F                  __ptext8 070E  
                _readPad 0799                  _skipRom 0705     end_of_initialization 07FE  
             ??_convertT 0071                  memset@c 0071                  memset@n 0073  
                memset@p 0075               ??_read_bit 0072           __end_of_memset 075A  
         __end_of_write0 071F           __end_of_write1 0730      start_initialization 07F3  
               ??_memset 0075               memset@dest 0070                 ??_write0 0070  
               ??_write1 0070                ___latbits 0000                 ?_readPad 0070  
               ?_skipRom 0070                read_bit@b 0073                 _convertT 06FC  
               _read_bit 0773                 readPad@i 0076                 readPad@j 0078  
