

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Wed Jan 22 13:04:01 2025

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F628A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
     7                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
     8                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
     9                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    10                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    11                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    12                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    13                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    14                           	dabs	1,0x7E,2
    15     0000                     
    16                           ; Generated 12/10/2023 GMT
    17                           ; 
    18                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    19                           ; All rights reserved.
    20                           ; 
    21                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    22                           ; 
    23                           ; Redistribution and use in source and binary forms, with or without modification, are
    24                           ; permitted provided that the following conditions are met:
    25                           ; 
    26                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    27                           ;        conditions and the following disclaimer.
    28                           ; 
    29                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    30                           ;        of conditions and the following disclaimer in the documentation and/or other
    31                           ;        materials provided with the distribution. Publication is not required when
    32                           ;        this file is used in an embedded application.
    33                           ; 
    34                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    35                           ;        software without specific prior written permission.
    36                           ; 
    37                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    38                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    39                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    40                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    41                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    42                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    43                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    44                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    45                           ; 
    46                           ; 
    47                           ; Code-generator required, PIC16F628A Definitions
    48                           ; 
    49                           ; SFR Addresses
    50     0004                     fsr             equ	4
    51     0004                     fsr0            equ	4
    52     0000                     indf            equ	0
    53     0000                     indf0           equ	0
    54     0002                     pc              equ	2
    55     0002                     pcl             equ	2
    56     000A                     pclath          equ	10
    57     0003                     status          equ	3
    58     0000                     INDF            equ	0	;# 
    59     0001                     TMR0            equ	1	;# 
    60     0002                     PCL             equ	2	;# 
    61     0003                     STATUS          equ	3	;# 
    62     0004                     FSR             equ	4	;# 
    63     0005                     PORTA           equ	5	;# 
    64     0006                     PORTB           equ	6	;# 
    65     000A                     PCLATH          equ	10	;# 
    66     000B                     INTCON          equ	11	;# 
    67     000C                     PIR1            equ	12	;# 
    68     000E                     TMR1            equ	14	;# 
    69     000E                     TMR1L           equ	14	;# 
    70     000F                     TMR1H           equ	15	;# 
    71     0010                     T1CON           equ	16	;# 
    72     0011                     TMR2            equ	17	;# 
    73     0012                     T2CON           equ	18	;# 
    74     0015                     CCPR1           equ	21	;# 
    75     0015                     CCPR1L          equ	21	;# 
    76     0016                     CCPR1H          equ	22	;# 
    77     0017                     CCP1CON         equ	23	;# 
    78     0018                     RCSTA           equ	24	;# 
    79     0019                     TXREG           equ	25	;# 
    80     001A                     RCREG           equ	26	;# 
    81     001F                     CMCON           equ	31	;# 
    82     0081                     OPTION_REG      equ	129	;# 
    83     0085                     TRISA           equ	133	;# 
    84     0086                     TRISB           equ	134	;# 
    85     008C                     PIE1            equ	140	;# 
    86     008E                     PCON            equ	142	;# 
    87     0092                     PR2             equ	146	;# 
    88     0098                     TXSTA           equ	152	;# 
    89     0099                     SPBRG           equ	153	;# 
    90     009A                     EEDATA          equ	154	;# 
    91     009B                     EEADR           equ	155	;# 
    92     009C                     EECON1          equ	156	;# 
    93     009D                     EECON2          equ	157	;# 
    94     009F                     VRCON           equ	159	;# 
    95     0000                     INDF            equ	0	;# 
    96     0001                     TMR0            equ	1	;# 
    97     0002                     PCL             equ	2	;# 
    98     0003                     STATUS          equ	3	;# 
    99     0004                     FSR             equ	4	;# 
   100     0005                     PORTA           equ	5	;# 
   101     0006                     PORTB           equ	6	;# 
   102     000A                     PCLATH          equ	10	;# 
   103     000B                     INTCON          equ	11	;# 
   104     000C                     PIR1            equ	12	;# 
   105     000E                     TMR1            equ	14	;# 
   106     000E                     TMR1L           equ	14	;# 
   107     000F                     TMR1H           equ	15	;# 
   108     0010                     T1CON           equ	16	;# 
   109     0011                     TMR2            equ	17	;# 
   110     0012                     T2CON           equ	18	;# 
   111     0015                     CCPR1           equ	21	;# 
   112     0015                     CCPR1L          equ	21	;# 
   113     0016                     CCPR1H          equ	22	;# 
   114     0017                     CCP1CON         equ	23	;# 
   115     0018                     RCSTA           equ	24	;# 
   116     0019                     TXREG           equ	25	;# 
   117     001A                     RCREG           equ	26	;# 
   118     001F                     CMCON           equ	31	;# 
   119     0081                     OPTION_REG      equ	129	;# 
   120     0085                     TRISA           equ	133	;# 
   121     0086                     TRISB           equ	134	;# 
   122     008C                     PIE1            equ	140	;# 
   123     008E                     PCON            equ	142	;# 
   124     0092                     PR2             equ	146	;# 
   125     0098                     TXSTA           equ	152	;# 
   126     0099                     SPBRG           equ	153	;# 
   127     009A                     EEDATA          equ	154	;# 
   128     009B                     EEADR           equ	155	;# 
   129     009C                     EECON1          equ	156	;# 
   130     009D                     EECON2          equ	157	;# 
   131     009F                     VRCON           equ	159	;# 
   132     0431                     _TRISB1         set	1073
   133                           
   134                           	psect	cinit
   135     07FE                     start_initialization:	
   136                           ; #config settings
   137                           
   138     07FE                     __initialization:
   139     07FE                     end_of_initialization:	
   140                           ;End of C runtime variable initialization code
   141                           
   142     07FE                     __end_of__initialization:
   143     07FE  0183               	clrf	3
   144     07FF  2FA1               	ljmp	_main	;jump to C main() function
   145                           
   146                           	psect	cstackCOMMON
   147     0070                     __pcstackCOMMON:
   148     0070                     ?_reset:
   149     0070                     ?_skipRom:	
   150                           ; 1 bytes @ 0x0
   151                           
   152     0070                     ?_convertT:	
   153                           ; 1 bytes @ 0x0
   154                           
   155     0070                     ?_readPad:	
   156                           ; 1 bytes @ 0x0
   157                           
   158     0070                     ?_write0:	
   159                           ; 1 bytes @ 0x0
   160                           
   161     0070                     ?_write1:	
   162                           ; 1 bytes @ 0x0
   163                           
   164     0070                     ?_main:	
   165                           ; 1 bytes @ 0x0
   166                           
   167     0070                     ??_reset:	
   168                           ; 2 bytes @ 0x0
   169                           
   170     0070                     ??_write0:	
   171                           ; 1 bytes @ 0x0
   172                           
   173     0070                     ??_write1:	
   174                           ; 1 bytes @ 0x0
   175                           
   176                           
   177                           ; 1 bytes @ 0x0
   178     0070                     	ds	1
   179     0071                     ??_skipRom:
   180     0071                     ??_convertT:	
   181                           ; 1 bytes @ 0x1
   182                           
   183     0071                     ??_readPad:	
   184                           ; 1 bytes @ 0x1
   185                           
   186                           
   187                           ; 1 bytes @ 0x1
   188     0071                     	ds	1
   189     0072                     ??_main:
   190                           
   191                           	psect	maintext
   192     07A1                     __pmaintext:	
   193                           ; 1 bytes @ 0x2
   194 ;;
   195 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   196 ;;
   197 ;; *************** function _main *****************
   198 ;; Defined at:
   199 ;;		line 30 in file "main.c"
   200 ;; Parameters:    Size  Location     Type
   201 ;;		None
   202 ;; Auto vars:     Size  Location     Type
   203 ;;		None
   204 ;; Return value:  Size  Location     Type
   205 ;;                  2   20[None  ] int 
   206 ;; Registers used:
   207 ;;		wreg, status,2, status,0, pclath, cstack
   208 ;; Tracked objects:
   209 ;;		On entry : B00/0
   210 ;;		On exit  : 0/0
   211 ;;		Unchanged: 0/0
   212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   213 ;;      Params:         0       0       0       0
   214 ;;      Locals:         0       0       0       0
   215 ;;      Temps:          0       0       0       0
   216 ;;      Totals:         0       0       0       0
   217 ;;Total ram usage:        0 bytes
   218 ;; Hardware stack levels required when called: 2
   219 ;; This function calls:
   220 ;;		_convertT
   221 ;;		_readPad
   222 ;;		_reset
   223 ;;		_skipRom
   224 ;; This function is called by:
   225 ;;		Startup code after reset
   226 ;; This function uses a non-reentrant model
   227 ;;
   228                           
   229     07A1                     _main:	
   230                           ;psect for function _main
   231                           
   232     07A1                     l610:	
   233                           ;incstack = 0
   234                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   235                           
   236                           
   237                           ;main.c: 31:  write0();
   238     07A1  27E5               	fcall	_reset
   239                           
   240                           ;main.c: 32:  write1();
   241     07A2  27BA               	fcall	_skipRom
   242                           
   243                           ;main.c: 33:  write1();
   244     07A3  27A8               	fcall	_convertT
   245                           
   246                           ;main.c: 35:  write0();
   247     07A4  27E5               	fcall	_reset
   248                           
   249                           ;main.c: 36:  write1();
   250     07A5  27BA               	fcall	_skipRom
   251                           
   252                           ;main.c: 37:  write1();
   253     07A6  27B1               	fcall	_readPad
   254     07A7                     l21:
   255     07A7  2800               	ljmp	start
   256     07A8                     __end_of_main:
   257                           
   258                           	psect	text1
   259     07BA                     __ptext1:	
   260 ;; *************** function _skipRom *****************
   261 ;; Defined at:
   262 ;;		line 49 in file "main.c"
   263 ;; Parameters:    Size  Location     Type
   264 ;;		None
   265 ;; Auto vars:     Size  Location     Type
   266 ;;		None
   267 ;; Return value:  Size  Location     Type
   268 ;;                  1    wreg      void 
   269 ;; Registers used:
   270 ;;		wreg, status,2, status,0, pclath, cstack
   271 ;; Tracked objects:
   272 ;;		On entry : 0/0
   273 ;;		On exit  : 0/0
   274 ;;		Unchanged: 0/0
   275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   276 ;;      Params:         0       0       0       0
   277 ;;      Locals:         0       0       0       0
   278 ;;      Temps:          0       0       0       0
   279 ;;      Totals:         0       0       0       0
   280 ;;Total ram usage:        0 bytes
   281 ;; Hardware stack levels used: 1
   282 ;; Hardware stack levels required when called: 1
   283 ;; This function calls:
   284 ;;		_write0
   285 ;;		_write1
   286 ;; This function is called by:
   287 ;;		_main
   288 ;; This function uses a non-reentrant model
   289 ;;
   290                           
   291     07BA                     _skipRom:	
   292                           ;psect for function _skipRom
   293                           
   294     07BA                     l604:	
   295                           ;incstack = 0
   296                           ; Regs used in _skipRom: [wreg+status,2+status,0+pclath+cstack]
   297                           
   298                           
   299                           ;main.c: 50: 
   300     07BA  27C3               	fcall	_write0
   301                           
   302                           ;main.c: 51: void readPad() {
   303     07BB  27C3               	fcall	_write0
   304                           
   305                           ;main.c: 52:  write0();
   306     07BC  27D4               	fcall	_write1
   307                           
   308                           ;main.c: 53:  write1();
   309     07BD  27D4               	fcall	_write1
   310                           
   311                           ;main.c: 54:  write1();
   312     07BE  27C3               	fcall	_write0
   313                           
   314                           ;main.c: 55:  write1();
   315     07BF  27C3               	fcall	_write0
   316                           
   317                           ;main.c: 56:  write1();
   318     07C0  27D4               	fcall	_write1
   319                           
   320                           ;main.c: 57:  write1();
   321     07C1  27D4               	fcall	_write1
   322     07C2                     l27:
   323     07C2  0008               	return
   324     07C3                     __end_of_skipRom:
   325                           
   326                           	psect	text2
   327     07E5                     __ptext2:	
   328 ;; *************** function _reset *****************
   329 ;; Defined at:
   330 ;;		line 42 in file "main.c"
   331 ;; Parameters:    Size  Location     Type
   332 ;;		None
   333 ;; Auto vars:     Size  Location     Type
   334 ;;		None
   335 ;; Return value:  Size  Location     Type
   336 ;;                  1    wreg      void 
   337 ;; Registers used:
   338 ;;		wreg
   339 ;; Tracked objects:
   340 ;;		On entry : 0/0
   341 ;;		On exit  : 0/0
   342 ;;		Unchanged: 0/0
   343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   344 ;;      Params:         0       0       0       0
   345 ;;      Locals:         0       0       0       0
   346 ;;      Temps:          2       0       0       0
   347 ;;      Totals:         2       0       0       0
   348 ;;Total ram usage:        2 bytes
   349 ;; Hardware stack levels used: 1
   350 ;; This function calls:
   351 ;;		Nothing
   352 ;; This function is called by:
   353 ;;		_main
   354 ;; This function uses a non-reentrant model
   355 ;;
   356                           
   357     07E5                     _reset:	
   358                           ;psect for function _reset
   359                           
   360     07E5                     l598:	
   361                           ;incstack = 0
   362                           ; Regs used in _reset: [wreg]
   363                           
   364                           
   365                           ;main.c: 43:  write1();
   366     07E5  1683               	bsf	3,5	;RP0=1, select bank1
   367     07E6  1303               	bcf	3,6	;RP1=0, select bank1
   368     07E7  1086               	bcf	6,1	;volatile
   369     07E8                     l600:
   370                           
   371                           ;main.c: 44:  write0();
   372     07E8  3003               	movlw	3
   373     07E9  00F1               	movwf	??_reset+1
   374     07EA  3097               	movlw	151
   375     07EB  00F0               	movwf	??_reset
   376     07EC                     u17:
   377     07EC  0BF0               	decfsz	??_reset,f
   378     07ED  2FEC               	goto	u17
   379     07EE  0BF1               	decfsz	??_reset+1,f
   380     07EF  2FEC               	goto	u17
   381     07F0  2FF1               	nop2
   382     07F1                     l602:
   383                           
   384                           ;main.c: 45:  write0();
   385     07F1  1683               	bsf	3,5	;RP0=1, select bank1
   386     07F2  1303               	bcf	3,6	;RP1=0, select bank1
   387     07F3  1486               	bsf	6,1	;volatile
   388                           
   389                           ;main.c: 46:  write0();
   390     07F4  3003               	movlw	3
   391     07F5  00F1               	movwf	??_reset+1
   392     07F6  3097               	movlw	151
   393     07F7  00F0               	movwf	??_reset
   394     07F8                     u27:
   395     07F8  0BF0               	decfsz	??_reset,f
   396     07F9  2FF8               	goto	u27
   397     07FA  0BF1               	decfsz	??_reset+1,f
   398     07FB  2FF8               	goto	u27
   399     07FC  2FFD               	nop2
   400     07FD                     l24:
   401     07FD  0008               	return
   402     07FE                     __end_of_reset:
   403                           
   404                           	psect	text3
   405     07B1                     __ptext3:	
   406 ;; *************** function _readPad *****************
   407 ;; Defined at:
   408 ;;		line 71 in file "main.c"
   409 ;; Parameters:    Size  Location     Type
   410 ;;		None
   411 ;; Auto vars:     Size  Location     Type
   412 ;;		None
   413 ;; Return value:  Size  Location     Type
   414 ;;                  1    wreg      void 
   415 ;; Registers used:
   416 ;;		wreg, status,2, status,0, pclath, cstack
   417 ;; Tracked objects:
   418 ;;		On entry : 0/0
   419 ;;		On exit  : 0/0
   420 ;;		Unchanged: 0/0
   421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   422 ;;      Params:         0       0       0       0
   423 ;;      Locals:         0       0       0       0
   424 ;;      Temps:          0       0       0       0
   425 ;;      Totals:         0       0       0       0
   426 ;;Total ram usage:        0 bytes
   427 ;; Hardware stack levels used: 1
   428 ;; Hardware stack levels required when called: 1
   429 ;; This function calls:
   430 ;;		_write0
   431 ;;		_write1
   432 ;; This function is called by:
   433 ;;		_main
   434 ;; This function uses a non-reentrant model
   435 ;;
   436                           
   437     07B1                     _readPad:	
   438                           ;psect for function _readPad
   439                           
   440     07B1                     l608:	
   441                           ;incstack = 0
   442                           ; Regs used in _readPad: [wreg+status,2+status,0+pclath+cstack]
   443                           
   444                           
   445                           ;main.c: 72: void write0() {
   446     07B1  27C3               	fcall	_write0
   447                           
   448                           ;main.c: 73:  TRISB1 = 0;
   449     07B2  27D4               	fcall	_write1
   450                           
   451                           ;main.c: 74:  _delay((unsigned long)((90)*(16000000/4000000.0)));
   452     07B3  27D4               	fcall	_write1
   453                           
   454                           ;main.c: 75:  TRISB1 = 1;
   455     07B4  27D4               	fcall	_write1
   456                           
   457                           ;main.c: 76:  _delay((unsigned long)((5)*(16000000/4000000.0)));
   458     07B5  27D4               	fcall	_write1
   459                           
   460                           ;main.c: 77: }
   461     07B6  27D4               	fcall	_write1
   462                           
   463                           ;main.c: 78: 
   464     07B7  27C3               	fcall	_write0
   465                           
   466                           ;main.c: 79: 
   467     07B8  27D4               	fcall	_write1
   468     07B9                     l33:
   469     07B9  0008               	return
   470     07BA                     __end_of_readPad:
   471                           
   472                           	psect	text4
   473     07A8                     __ptext4:	
   474 ;; *************** function _convertT *****************
   475 ;; Defined at:
   476 ;;		line 60 in file "main.c"
   477 ;; Parameters:    Size  Location     Type
   478 ;;		None
   479 ;; Auto vars:     Size  Location     Type
   480 ;;		None
   481 ;; Return value:  Size  Location     Type
   482 ;;                  1    wreg      void 
   483 ;; Registers used:
   484 ;;		wreg, status,2, status,0, pclath, cstack
   485 ;; Tracked objects:
   486 ;;		On entry : 0/0
   487 ;;		On exit  : 0/0
   488 ;;		Unchanged: 0/0
   489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   490 ;;      Params:         0       0       0       0
   491 ;;      Locals:         0       0       0       0
   492 ;;      Temps:          0       0       0       0
   493 ;;      Totals:         0       0       0       0
   494 ;;Total ram usage:        0 bytes
   495 ;; Hardware stack levels used: 1
   496 ;; Hardware stack levels required when called: 1
   497 ;; This function calls:
   498 ;;		_write0
   499 ;;		_write1
   500 ;; This function is called by:
   501 ;;		_main
   502 ;; This function uses a non-reentrant model
   503 ;;
   504                           
   505     07A8                     _convertT:	
   506                           ;psect for function _convertT
   507                           
   508     07A8                     l606:	
   509                           ;incstack = 0
   510                           ; Regs used in _convertT: [wreg+status,2+status,0+pclath+cstack]
   511                           
   512                           
   513                           ;main.c: 61: 
   514     07A8  27C3               	fcall	_write0
   515                           
   516                           ;main.c: 62: 
   517     07A9  27C3               	fcall	_write0
   518                           
   519                           ;main.c: 63: void write1() {
   520     07AA  27D4               	fcall	_write1
   521                           
   522                           ;main.c: 64:  TRISB1 = 0;
   523     07AB  27C3               	fcall	_write0
   524                           
   525                           ;main.c: 65:  _delay((unsigned long)((5)*(16000000/4000000.0)));
   526     07AC  27C3               	fcall	_write0
   527                           
   528                           ;main.c: 66:  TRISB1 = 1;
   529     07AD  27C3               	fcall	_write0
   530                           
   531                           ;main.c: 67:  _delay((unsigned long)((90)*(16000000/4000000.0)));
   532     07AE  27D4               	fcall	_write1
   533                           
   534                           ;main.c: 68: 
   535     07AF  27C3               	fcall	_write0
   536     07B0                     l30:
   537     07B0  0008               	return
   538     07B1                     __end_of_convertT:
   539                           
   540                           	psect	text5
   541     07D4                     __ptext5:	
   542 ;; *************** function _write1 *****************
   543 ;; Defined at:
   544 ;;		line 83 in file "main.c"
   545 ;; Parameters:    Size  Location     Type
   546 ;;		None
   547 ;; Auto vars:     Size  Location     Type
   548 ;;		None
   549 ;; Return value:  Size  Location     Type
   550 ;;                  1    wreg      void 
   551 ;; Registers used:
   552 ;;		wreg
   553 ;; Tracked objects:
   554 ;;		On entry : 0/0
   555 ;;		On exit  : 0/0
   556 ;;		Unchanged: 0/0
   557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   558 ;;      Params:         0       0       0       0
   559 ;;      Locals:         0       0       0       0
   560 ;;      Temps:          1       0       0       0
   561 ;;      Totals:         1       0       0       0
   562 ;;Total ram usage:        1 bytes
   563 ;; Hardware stack levels used: 1
   564 ;; This function calls:
   565 ;;		Nothing
   566 ;; This function is called by:
   567 ;;		_skipRom
   568 ;;		_convertT
   569 ;;		_readPad
   570 ;; This function uses a non-reentrant model
   571 ;;
   572                           
   573     07D4                     _write1:	
   574                           ;psect for function _write1
   575                           
   576     07D4                     l592:	
   577                           ;incstack = 0
   578                           ; Regs used in _write1: [wreg]
   579                           
   580                           
   581                           ;main.c: 84:  _delay((unsigned long)((90)*(16000000/4000000.0)));
   582     07D4  1683               	bsf	3,5	;RP0=1, select bank1
   583     07D5  1303               	bcf	3,6	;RP1=0, select bank1
   584     07D6  1086               	bcf	6,1	;volatile
   585     07D7                     l594:
   586                           
   587                           ;main.c: 85:  return 0;
   588     07D7  3006               	movlw	6
   589     07D8  00F0               	movwf	??_write1
   590     07D9                     u37:
   591     07D9  0BF0               	decfsz	??_write1,f
   592     07DA  2FD9               	goto	u37
   593     07DB  0000               	nop
   594     07DC                     l596:
   595                           
   596                           ;main.c: 86: }
   597     07DC  1683               	bsf	3,5	;RP0=1, select bank1
   598     07DD  1303               	bcf	3,6	;RP1=0, select bank1
   599     07DE  1486               	bsf	6,1	;volatile
   600     07DF  3077               	movlw	119
   601     07E0  00F0               	movwf	??_write1
   602     07E1                     u47:
   603     07E1  0BF0               	decfsz	??_write1,f
   604     07E2  2FE1               	goto	u47
   605     07E3  2FE4               	nop2
   606     07E4                     l36:
   607     07E4  0008               	return
   608     07E5                     __end_of_write1:
   609                           
   610                           	psect	text6
   611     07C3                     __ptext6:	
   612 ;; *************** function _write0 *****************
   613 ;; Defined at:
   614 ;;		line 92 in file "main.c"
   615 ;; Parameters:    Size  Location     Type
   616 ;;		None
   617 ;; Auto vars:     Size  Location     Type
   618 ;;		None
   619 ;; Return value:  Size  Location     Type
   620 ;;                  1    wreg      void 
   621 ;; Registers used:
   622 ;;		wreg
   623 ;; Tracked objects:
   624 ;;		On entry : 0/0
   625 ;;		On exit  : 0/0
   626 ;;		Unchanged: 0/0
   627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   628 ;;      Params:         0       0       0       0
   629 ;;      Locals:         0       0       0       0
   630 ;;      Temps:          1       0       0       0
   631 ;;      Totals:         1       0       0       0
   632 ;;Total ram usage:        1 bytes
   633 ;; Hardware stack levels used: 1
   634 ;; This function calls:
   635 ;;		Nothing
   636 ;; This function is called by:
   637 ;;		_skipRom
   638 ;;		_convertT
   639 ;;		_readPad
   640 ;; This function uses a non-reentrant model
   641 ;;
   642                           
   643     07C3                     _write0:	
   644                           ;psect for function _write0
   645                           
   646     07C3                     l586:	
   647                           ;incstack = 0
   648                           ; Regs used in _write0: [wreg]
   649                           
   650     07C3  1683               	bsf	3,5	;RP0=1, select bank1
   651     07C4  1303               	bcf	3,6	;RP1=0, select bank1
   652     07C5  1086               	bcf	6,1	;volatile
   653     07C6                     l588:
   654     07C6  3077               	movlw	119
   655     07C7  00F0               	movwf	??_write0
   656     07C8                     u57:
   657     07C8  0BF0               	decfsz	??_write0,f
   658     07C9  2FC8               	goto	u57
   659     07CA  2FCB               	nop2
   660     07CB                     l590:
   661     07CB  1683               	bsf	3,5	;RP0=1, select bank1
   662     07CC  1303               	bcf	3,6	;RP1=0, select bank1
   663     07CD  1486               	bsf	6,1	;volatile
   664     07CE  3006               	movlw	6
   665     07CF  00F0               	movwf	??_write0
   666     07D0                     u67:
   667     07D0  0BF0               	decfsz	??_write0,f
   668     07D1  2FD0               	goto	u67
   669     07D2  0000               	nop
   670     07D3                     l39:
   671     07D3  0008               	return
   672     07D4                     __end_of_write0:
   673     0000                     ___latbits      equ	0
   674     007E                     btemp           set	126	;btemp
   675     007E                     wtemp0          set	126
   676                           
   677                           	psect	config
   678                           
   679                           ;Config register CONFIG @ 0x2007
   680                           ;	Oscillator Selection bits
   681                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
   682                           ;	Watchdog Timer Enable bit
   683                           ;	WDTE = OFF, WDT disabled
   684                           ;	Power-up Timer Enable bit
   685                           ;	PWRTE = OFF, PWRT disabled
   686                           ;	RA5/MCLR/VPP Pin Function Select bit
   687                           ;	MCLRE = OFF, RA5/MCLR/VPP pin function is digital input, MCLR internally tied to VDD
   688                           ;	Brown-out Detect Enable bit
   689                           ;	BOREN = OFF, BOD disabled
   690                           ;	Low-Voltage Programming Enable bit
   691                           ;	LVP = OFF, RB4/PGM pin has digital I/O function, HV on MCLR must be used for programmi
      +                          ng
   692                           ;	Data EE Memory Code Protection bit
   693                           ;	CPD = OFF, Data memory code protection off
   694                           ;	Flash Program Memory Code Protection bit
   695                           ;	CP = OFF, Code protection off
   696     2007                     	org	8199
   697     2007  3F0A               	dw	16138

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      2       2
    BANK0            80      0       0
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_reset
    _skipRom->_write0
    _skipRom->_write1
    _readPad->_write0
    _readPad->_write1
    _convertT->_write0
    _convertT->_write1

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
                           _convertT
                            _readPad
                              _reset
                            _skipRom
 ---------------------------------------------------------------------------------
 (1) _skipRom                                              0     0      0       0
                             _write0
                             _write1
 ---------------------------------------------------------------------------------
 (1) _reset                                                2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _readPad                                              0     0      0       0
                             _write0
                             _write1
 ---------------------------------------------------------------------------------
 (1) _convertT                                             0     0      0       0
                             _write0
                             _write1
 ---------------------------------------------------------------------------------
 (2) _write1                                               1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _write0                                               1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _convertT
     _write0
     _write1
   _readPad
     _write0
     _write1
   _reset
   _skipRom
     _write0
     _write1

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           14      0       0      0.0%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK2            48      0       0      0.0%
COMMON              14      2       2     14.3%
BANK0               80      0       0      0.0%
BANK1               80      0       0      0.0%
BANK2               48      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0       2      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Wed Jan 22 13:04:01 2025

                     l21 07A7                       l30 07B0                       l24 07FD  
                     l33 07B9                       l27 07C2                       l36 07E4  
                     l39 07D3                       u17 07EC                       u27 07F8  
                     u37 07D9                       u47 07E1                       u57 07C8  
                     u67 07D0                      l600 07E8                      l602 07F1  
                    l610 07A1                      l604 07BA                      l606 07A8  
                    l608 07B1                      l590 07CB                      l592 07D4  
                    l586 07C3                      l594 07D7                      l588 07C6  
                    l596 07DC                      l598 07E5                     _main 07A1  
                   btemp 007E                     start 0000                    ?_main 0070  
        __end_of_readPad 07BA                    _reset 07E5          __end_of_skipRom 07C3  
                  status 0003                    wtemp0 007E          __initialization 07FE  
           __end_of_main 07A8                   ??_main 0072                   ?_reset 0070  
                 _TRISB1 0431         __end_of_convertT 07B1                   _write0 07C3  
                 _write1 07D4                ??_readPad 0071                ??_skipRom 0071  
__end_of__initialization 07FE           __pcstackCOMMON 0070            __end_of_reset 07FE  
                ??_reset 0070               __pmaintext 07A1                  ?_write0 0070  
                ?_write1 0070                ?_convertT 0070                  __ptext1 07BA  
                __ptext2 07E5                  __ptext3 07B1                  __ptext4 07A8  
                __ptext5 07D4                  __ptext6 07C3                  _readPad 07B1  
                _skipRom 07BA     end_of_initialization 07FE               ??_convertT 0071  
         __end_of_write0 07D4           __end_of_write1 07E5      start_initialization 07FE  
               ??_write0 0070                 ??_write1 0070                ___latbits 0000  
               ?_readPad 0070                 ?_skipRom 0070                 _convertT 07A8  
